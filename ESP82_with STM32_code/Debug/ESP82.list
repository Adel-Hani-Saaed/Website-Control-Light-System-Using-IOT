
ESP82.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001600  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080017a0  080017a0  000117a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001888  08001888  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08001888  08001888  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001888  08001888  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001888  08001888  00011888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800188c  0800188c  0001188c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08001890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000007c  0800190c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  0800190c  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000892f  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001683  00000000  00000000  000289db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002d8  00000000  00000000  0002a060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000220  00000000  00000000  0002a338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001488  00000000  00000000  0002a558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004343  00000000  00000000  0002b9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a32e  00000000  00000000  0002fd23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0003a051  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d1c  00000000  00000000  0003a0a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001788 	.word	0x08001788

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08001788 	.word	0x08001788

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <COR_NVIC_vEnableInterrupt>:
#include "../inc/BIT_MATH.h"
#include "../inc/CORE_NVIC_Interface.h"

void (*Global_NVICCallBackPtr)(void) = NULL;

void COR_NVIC_vEnableInterrupt(IRQ_Num_t Cp_xIRQId) {
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
	if (Cp_xIRQId < 240) {
		NVIC->NVIC_ISER[Cp_xIRQId / 32] = (1 << (Cp_xIRQId % 32));
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	425a      	negs	r2, r3
 80002a0:	f003 031f 	and.w	r3, r3, #31
 80002a4:	f002 021f 	and.w	r2, r2, #31
 80002a8:	bf58      	it	pl
 80002aa:	4253      	negpl	r3, r2
 80002ac:	b25b      	sxtb	r3, r3
 80002ae:	461a      	mov	r2, r3
 80002b0:	2301      	movs	r3, #1
 80002b2:	fa03 f102 	lsl.w	r1, r3, r2
 80002b6:	4a08      	ldr	r2, [pc, #32]	; (80002d8 <COR_NVIC_vEnableInterrupt+0x48>)
 80002b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	da00      	bge.n	80002c2 <COR_NVIC_vEnableInterrupt+0x32>
 80002c0:	331f      	adds	r3, #31
 80002c2:	115b      	asrs	r3, r3, #5
 80002c4:	b25b      	sxtb	r3, r3
 80002c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000e100 	.word	0xe000e100

080002dc <ESP_voidInit>:
char Closing[]	 = "\r\n"	;
u8 Local_u8Response1[100] ={0};


void ESP_voidInit(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
	u8 Local_u8Result = 0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	71fb      	strb	r3, [r7, #7]

	while(Local_u8Result == 0)
 80002e6:	e007      	b.n	80002f8 <ESP_voidInit+0x1c>
	{
		/* Stop ECHO */
		UART_voidTransmit("ATE0\r\n" , 6);
 80002e8:	2106      	movs	r1, #6
 80002ea:	480e      	ldr	r0, [pc, #56]	; (8000324 <ESP_voidInit+0x48>)
 80002ec:	f000 fc9c 	bl	8000c28 <UART_voidTransmit>
		Local_u8Result = voidEspValidateCmd();
 80002f0:	f000 f998 	bl	8000624 <voidEspValidateCmd>
 80002f4:	4603      	mov	r3, r0
 80002f6:	71fb      	strb	r3, [r7, #7]
	while(Local_u8Result == 0)
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d0f4      	beq.n	80002e8 <ESP_voidInit+0xc>
	}

	Local_u8Result = 0;
 80002fe:	2300      	movs	r3, #0
 8000300:	71fb      	strb	r3, [r7, #7]

	while(Local_u8Result == 0)
 8000302:	e007      	b.n	8000314 <ESP_voidInit+0x38>
	{
		/* Set station mode */
		UART_voidTransmit("AT+CWMODE=1\r\n",20);
 8000304:	2114      	movs	r1, #20
 8000306:	4808      	ldr	r0, [pc, #32]	; (8000328 <ESP_voidInit+0x4c>)
 8000308:	f000 fc8e 	bl	8000c28 <UART_voidTransmit>
		Local_u8Result = voidEspValidateCmd();
 800030c:	f000 f98a 	bl	8000624 <voidEspValidateCmd>
 8000310:	4603      	mov	r3, r0
 8000312:	71fb      	strb	r3, [r7, #7]
	while(Local_u8Result == 0)
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d0f4      	beq.n	8000304 <ESP_voidInit+0x28>
	}

}
 800031a:	bf00      	nop
 800031c:	bf00      	nop
 800031e:	3708      	adds	r7, #8
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	080017a0 	.word	0x080017a0
 8000328:	080017a8 	.word	0x080017a8

0800032c <ESP_voidConnctEspRouter>:


void ESP_voidConnctEspRouter(char* Copy_u8StrSsid, char* Copy_u8StrPassword)
{
 800032c:	b590      	push	{r4, r7, lr}
 800032e:	b09d      	sub	sp, #116	; 0x74
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	6039      	str	r1, [r7, #0]
	u8 Local_u8ValidFlag = 0;
 8000336:	2300      	movs	r3, #0
 8000338:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	char Router_Command[100];

	/* Empty the pointer that strcat was using last time as it saves at the same location and data may interference*/
	strcpy(Router_Command, "");
 800033c:	2300      	movs	r3, #0
 800033e:	723b      	strb	r3, [r7, #8]

	/*catenating strings to be : "AT+CWJAP_CUR="Copy_u8StrSsid","Copy_u8StrPassword""*/
	strcat(Router_Command, "AT+CWJAP_CUR=");
 8000340:	f107 0308 	add.w	r3, r7, #8
 8000344:	4618      	mov	r0, r3
 8000346:	f7ff ff4b 	bl	80001e0 <strlen>
 800034a:	4603      	mov	r3, r0
 800034c:	461a      	mov	r2, r3
 800034e:	f107 0308 	add.w	r3, r7, #8
 8000352:	4413      	add	r3, r2
 8000354:	4a26      	ldr	r2, [pc, #152]	; (80003f0 <ESP_voidConnctEspRouter+0xc4>)
 8000356:	461c      	mov	r4, r3
 8000358:	4613      	mov	r3, r2
 800035a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800035c:	6020      	str	r0, [r4, #0]
 800035e:	6061      	str	r1, [r4, #4]
 8000360:	60a2      	str	r2, [r4, #8]
 8000362:	881b      	ldrh	r3, [r3, #0]
 8000364:	81a3      	strh	r3, [r4, #12]

	strcat(Router_Command, Quotes);
 8000366:	f107 0308 	add.w	r3, r7, #8
 800036a:	4922      	ldr	r1, [pc, #136]	; (80003f4 <ESP_voidConnctEspRouter+0xc8>)
 800036c:	4618      	mov	r0, r3
 800036e:	f000 fdef 	bl	8000f50 <strcat>
	strcat(Router_Command, Copy_u8StrSsid);
 8000372:	f107 0308 	add.w	r3, r7, #8
 8000376:	6879      	ldr	r1, [r7, #4]
 8000378:	4618      	mov	r0, r3
 800037a:	f000 fde9 	bl	8000f50 <strcat>
	strcat(Router_Command, Quotes);
 800037e:	f107 0308 	add.w	r3, r7, #8
 8000382:	491c      	ldr	r1, [pc, #112]	; (80003f4 <ESP_voidConnctEspRouter+0xc8>)
 8000384:	4618      	mov	r0, r3
 8000386:	f000 fde3 	bl	8000f50 <strcat>

	strcat(Router_Command, Comma);
 800038a:	f107 0308 	add.w	r3, r7, #8
 800038e:	491a      	ldr	r1, [pc, #104]	; (80003f8 <ESP_voidConnctEspRouter+0xcc>)
 8000390:	4618      	mov	r0, r3
 8000392:	f000 fddd 	bl	8000f50 <strcat>

	strcat(Router_Command, Quotes);
 8000396:	f107 0308 	add.w	r3, r7, #8
 800039a:	4916      	ldr	r1, [pc, #88]	; (80003f4 <ESP_voidConnctEspRouter+0xc8>)
 800039c:	4618      	mov	r0, r3
 800039e:	f000 fdd7 	bl	8000f50 <strcat>
	strcat(Router_Command, Copy_u8StrPassword);
 80003a2:	f107 0308 	add.w	r3, r7, #8
 80003a6:	6839      	ldr	r1, [r7, #0]
 80003a8:	4618      	mov	r0, r3
 80003aa:	f000 fdd1 	bl	8000f50 <strcat>
	strcat(Router_Command, Quotes);
 80003ae:	f107 0308 	add.w	r3, r7, #8
 80003b2:	4910      	ldr	r1, [pc, #64]	; (80003f4 <ESP_voidConnctEspRouter+0xc8>)
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 fdcb 	bl	8000f50 <strcat>

	strcat(Router_Command, Closing);
 80003ba:	f107 0308 	add.w	r3, r7, #8
 80003be:	490f      	ldr	r1, [pc, #60]	; (80003fc <ESP_voidConnctEspRouter+0xd0>)
 80003c0:	4618      	mov	r0, r3
 80003c2:	f000 fdc5 	bl	8000f50 <strcat>

	while(Local_u8ValidFlag == 0)
 80003c6:	e00a      	b.n	80003de <ESP_voidConnctEspRouter+0xb2>
	{
		/*Connect to WiFi of name Copy_u8StrSsid and password Copy_u8StrPassword*/
		UART_voidTransmit(Router_Command , 100 );
 80003c8:	f107 0308 	add.w	r3, r7, #8
 80003cc:	2164      	movs	r1, #100	; 0x64
 80003ce:	4618      	mov	r0, r3
 80003d0:	f000 fc2a 	bl	8000c28 <UART_voidTransmit>
		/*	Check command is done right
			AT+CWJAP_CUR="SSID","Pass" returns OK if all is okay*/
		Local_u8ValidFlag = voidEspValidateCmd2();
 80003d4:	f000 f94c 	bl	8000670 <voidEspValidateCmd2>
 80003d8:	4603      	mov	r3, r0
 80003da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	while(Local_u8ValidFlag == 0)
 80003de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d0f0      	beq.n	80003c8 <ESP_voidConnctEspRouter+0x9c>
	}
}
 80003e6:	bf00      	nop
 80003e8:	bf00      	nop
 80003ea:	3774      	adds	r7, #116	; 0x74
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd90      	pop	{r4, r7, pc}
 80003f0:	080017b8 	.word	0x080017b8
 80003f4:	20000000 	.word	0x20000000
 80003f8:	20000004 	.word	0x20000004
 80003fc:	20000008 	.word	0x20000008

08000400 <ESP_voidConnectEspServer>:


void ESP_voidConnectEspServer(char* Copy_u8StrMode, char* Copy_u8StrIP, char* Copy_u8StrPort)
{
 8000400:	b590      	push	{r4, r7, lr}
 8000402:	b091      	sub	sp, #68	; 0x44
 8000404:	af00      	add	r7, sp, #0
 8000406:	60f8      	str	r0, [r7, #12]
 8000408:	60b9      	str	r1, [r7, #8]
 800040a:	607a      	str	r2, [r7, #4]
	u8 Local_u8ValidFlag = 0;
 800040c:	2300      	movs	r3, #0
 800040e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	char Server_Command[42];

	strcpy(Server_Command, "");
 8000412:	2300      	movs	r3, #0
 8000414:	753b      	strb	r3, [r7, #20]

	strcat(Server_Command, "AT+CIPSTART=");
 8000416:	f107 0314 	add.w	r3, r7, #20
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff fee0 	bl	80001e0 <strlen>
 8000420:	4603      	mov	r3, r0
 8000422:	461a      	mov	r2, r3
 8000424:	f107 0314 	add.w	r3, r7, #20
 8000428:	4413      	add	r3, r2
 800042a:	4a2d      	ldr	r2, [pc, #180]	; (80004e0 <ESP_voidConnectEspServer+0xe0>)
 800042c:	461c      	mov	r4, r3
 800042e:	4613      	mov	r3, r2
 8000430:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000432:	6020      	str	r0, [r4, #0]
 8000434:	6061      	str	r1, [r4, #4]
 8000436:	60a2      	str	r2, [r4, #8]
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	7323      	strb	r3, [r4, #12]

	strcat(Server_Command, Quotes);
 800043c:	f107 0314 	add.w	r3, r7, #20
 8000440:	4928      	ldr	r1, [pc, #160]	; (80004e4 <ESP_voidConnectEspServer+0xe4>)
 8000442:	4618      	mov	r0, r3
 8000444:	f000 fd84 	bl	8000f50 <strcat>
	strcat(Server_Command, Copy_u8StrMode);
 8000448:	f107 0314 	add.w	r3, r7, #20
 800044c:	68f9      	ldr	r1, [r7, #12]
 800044e:	4618      	mov	r0, r3
 8000450:	f000 fd7e 	bl	8000f50 <strcat>
	strcat(Server_Command, Quotes);
 8000454:	f107 0314 	add.w	r3, r7, #20
 8000458:	4922      	ldr	r1, [pc, #136]	; (80004e4 <ESP_voidConnectEspServer+0xe4>)
 800045a:	4618      	mov	r0, r3
 800045c:	f000 fd78 	bl	8000f50 <strcat>

	strcat(Server_Command, Comma);
 8000460:	f107 0314 	add.w	r3, r7, #20
 8000464:	4920      	ldr	r1, [pc, #128]	; (80004e8 <ESP_voidConnectEspServer+0xe8>)
 8000466:	4618      	mov	r0, r3
 8000468:	f000 fd72 	bl	8000f50 <strcat>

	strcat(Server_Command, Quotes);
 800046c:	f107 0314 	add.w	r3, r7, #20
 8000470:	491c      	ldr	r1, [pc, #112]	; (80004e4 <ESP_voidConnectEspServer+0xe4>)
 8000472:	4618      	mov	r0, r3
 8000474:	f000 fd6c 	bl	8000f50 <strcat>
	strcat(Server_Command, Copy_u8StrIP);
 8000478:	f107 0314 	add.w	r3, r7, #20
 800047c:	68b9      	ldr	r1, [r7, #8]
 800047e:	4618      	mov	r0, r3
 8000480:	f000 fd66 	bl	8000f50 <strcat>
	strcat(Server_Command, Quotes);
 8000484:	f107 0314 	add.w	r3, r7, #20
 8000488:	4916      	ldr	r1, [pc, #88]	; (80004e4 <ESP_voidConnectEspServer+0xe4>)
 800048a:	4618      	mov	r0, r3
 800048c:	f000 fd60 	bl	8000f50 <strcat>

	strcat(Server_Command, Comma);
 8000490:	f107 0314 	add.w	r3, r7, #20
 8000494:	4914      	ldr	r1, [pc, #80]	; (80004e8 <ESP_voidConnectEspServer+0xe8>)
 8000496:	4618      	mov	r0, r3
 8000498:	f000 fd5a 	bl	8000f50 <strcat>

	strcat(Server_Command, Copy_u8StrPort);
 800049c:	f107 0314 	add.w	r3, r7, #20
 80004a0:	6879      	ldr	r1, [r7, #4]
 80004a2:	4618      	mov	r0, r3
 80004a4:	f000 fd54 	bl	8000f50 <strcat>

	strcat(Server_Command, Closing);
 80004a8:	f107 0314 	add.w	r3, r7, #20
 80004ac:	490f      	ldr	r1, [pc, #60]	; (80004ec <ESP_voidConnectEspServer+0xec>)
 80004ae:	4618      	mov	r0, r3
 80004b0:	f000 fd4e 	bl	8000f50 <strcat>

	while(Local_u8ValidFlag == 0)
 80004b4:	e00a      	b.n	80004cc <ESP_voidConnectEspServer+0xcc>
	{
		UART_voidTransmit(Server_Command , 42 );
 80004b6:	f107 0314 	add.w	r3, r7, #20
 80004ba:	212a      	movs	r1, #42	; 0x2a
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 fbb3 	bl	8000c28 <UART_voidTransmit>

		Local_u8ValidFlag = voidEspValidateCmd3();
 80004c2:	f000 f8fd 	bl	80006c0 <voidEspValidateCmd3>
 80004c6:	4603      	mov	r3, r0
 80004c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	while(Local_u8ValidFlag == 0)
 80004cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d0f0      	beq.n	80004b6 <ESP_voidConnectEspServer+0xb6>
	}
}
 80004d4:	bf00      	nop
 80004d6:	bf00      	nop
 80004d8:	3744      	adds	r7, #68	; 0x44
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd90      	pop	{r4, r7, pc}
 80004de:	bf00      	nop
 80004e0:	080017c8 	.word	0x080017c8
 80004e4:	20000000 	.word	0x20000000
 80004e8:	20000004 	.word	0x20000004
 80004ec:	20000008 	.word	0x20000008

080004f0 <ESP_u8ExecuteHttpRequest>:




void ESP_u8ExecuteHttpRequest(char* Copy_u8StrRequest , char* Copy_u8Return )
{
 80004f0:	b5b0      	push	{r4, r5, r7, lr}
 80004f2:	b08e      	sub	sp, #56	; 0x38
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
 80004fa:	466b      	mov	r3, sp
 80004fc:	461d      	mov	r5, r3
	u8 Local_u8ValidFlag = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	char Send_Command[25];
	char Request_Command[(strlen(Copy_u8StrRequest) + 2)];
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f7ff fe6b 	bl	80001e0 <strlen>
 800050a:	4603      	mov	r3, r0
 800050c:	1c9c      	adds	r4, r3, #2
 800050e:	4623      	mov	r3, r4
 8000510:	3b01      	subs	r3, #1
 8000512:	633b      	str	r3, [r7, #48]	; 0x30
 8000514:	4620      	mov	r0, r4
 8000516:	f04f 0100 	mov.w	r1, #0
 800051a:	f04f 0200 	mov.w	r2, #0
 800051e:	f04f 0300 	mov.w	r3, #0
 8000522:	00cb      	lsls	r3, r1, #3
 8000524:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000528:	00c2      	lsls	r2, r0, #3
 800052a:	4620      	mov	r0, r4
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	f04f 0200 	mov.w	r2, #0
 8000534:	f04f 0300 	mov.w	r3, #0
 8000538:	00cb      	lsls	r3, r1, #3
 800053a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800053e:	00c2      	lsls	r2, r0, #3
 8000540:	1de3      	adds	r3, r4, #7
 8000542:	08db      	lsrs	r3, r3, #3
 8000544:	00db      	lsls	r3, r3, #3
 8000546:	ebad 0d03 	sub.w	sp, sp, r3
 800054a:	466b      	mov	r3, sp
 800054c:	3300      	adds	r3, #0
 800054e:	62fb      	str	r3, [r7, #44]	; 0x2c
	char Temp_str[2];

	/* Empty the pointer that strcat was using last time as it saves at the same location and data may interference*/
	strcpy(Send_Command, "AT+CIPSEND=");
 8000550:	f107 0310 	add.w	r3, r7, #16
 8000554:	4a2f      	ldr	r2, [pc, #188]	; (8000614 <ESP_u8ExecuteHttpRequest+0x124>)
 8000556:	ca07      	ldmia	r2, {r0, r1, r2}
 8000558:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	/* get length request and add 2 for \r\n */
	u8 NumberOfLetters = strlen(Copy_u8StrRequest) + 2;     //48
 800055c:	6878      	ldr	r0, [r7, #4]
 800055e:	f7ff fe3f 	bl	80001e0 <strlen>
 8000562:	4603      	mov	r3, r0
 8000564:	b2db      	uxtb	r3, r3
 8000566:	3302      	adds	r3, #2
 8000568:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b


	/*Convert the number of the request letters to String  why convert to string ->> for can using the strcat() function this function must the argument is string */
	sprintf(Temp_str, "%d", NumberOfLetters);			    //"48"
 800056c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	4928      	ldr	r1, [pc, #160]	; (8000618 <ESP_u8ExecuteHttpRequest+0x128>)
 8000576:	4618      	mov	r0, r3
 8000578:	f000 fcca 	bl	8000f10 <siprintf>

	strcat(Send_Command, Temp_str);							//"AT+CIPSEND=48"
 800057c:	f107 020c 	add.w	r2, r7, #12
 8000580:	f107 0310 	add.w	r3, r7, #16
 8000584:	4611      	mov	r1, r2
 8000586:	4618      	mov	r0, r3
 8000588:	f000 fce2 	bl	8000f50 <strcat>

	strcat(Send_Command, Closing);							//"AT+CIPSEND=48\r\n"
 800058c:	f107 0310 	add.w	r3, r7, #16
 8000590:	4922      	ldr	r1, [pc, #136]	; (800061c <ESP_u8ExecuteHttpRequest+0x12c>)
 8000592:	4618      	mov	r0, r3
 8000594:	f000 fcdc 	bl	8000f50 <strcat>

	while(Local_u8ValidFlag == 0)
 8000598:	e00a      	b.n	80005b0 <ESP_u8ExecuteHttpRequest+0xc0>
	{
		UART_voidTransmit(Send_Command,25);
 800059a:	f107 0310 	add.w	r3, r7, #16
 800059e:	2119      	movs	r1, #25
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fb41 	bl	8000c28 <UART_voidTransmit>

		Local_u8ValidFlag = voidEspValidateCmd5();
 80005a6:	f000 f8cd 	bl	8000744 <voidEspValidateCmd5>
 80005aa:	4603      	mov	r3, r0
 80005ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	while(Local_u8ValidFlag == 0)
 80005b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0f0      	beq.n	800059a <ESP_u8ExecuteHttpRequest+0xaa>

	/*********************************************************/
	/***********		SEND THE GET REQUEST 		  ********/
	/*********************************************************/

	Local_u8ValidFlag = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	strcpy(Request_Command, "");
 80005be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
	strcat(Request_Command, Copy_u8StrRequest);
 80005c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005c6:	6879      	ldr	r1, [r7, #4]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 fcc1 	bl	8000f50 <strcat>
	strcat(Request_Command, Closing);
 80005ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005d0:	4912      	ldr	r1, [pc, #72]	; (800061c <ESP_u8ExecuteHttpRequest+0x12c>)
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 fcbc 	bl	8000f50 <strcat>

	while(Local_u8ValidFlag == 0)
 80005d8:	e009      	b.n	80005ee <ESP_u8ExecuteHttpRequest+0xfe>
	{
		UART_voidTransmit(Request_Command, 48);
 80005da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005dc:	2130      	movs	r1, #48	; 0x30
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 fb22 	bl	8000c28 <UART_voidTransmit>

		Local_u8ValidFlag = voidEspValidateCmd4();
 80005e4:	f000 f8d4 	bl	8000790 <voidEspValidateCmd4>
 80005e8:	4603      	mov	r3, r0
 80005ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	while(Local_u8ValidFlag == 0)
 80005ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0f1      	beq.n	80005da <ESP_u8ExecuteHttpRequest+0xea>
	}

	u8 Temp_char;

	Temp_char = Local_u8Response1[50];
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <ESP_u8ExecuteHttpRequest+0x130>)
 80005f8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80005fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	(* Copy_u8Return) = Temp_char ;
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8000606:	701a      	strb	r2, [r3, #0]
 8000608:	46ad      	mov	sp, r5

}
 800060a:	bf00      	nop
 800060c:	3738      	adds	r7, #56	; 0x38
 800060e:	46bd      	mov	sp, r7
 8000610:	bdb0      	pop	{r4, r5, r7, pc}
 8000612:	bf00      	nop
 8000614:	080017d8 	.word	0x080017d8
 8000618:	080017e4 	.word	0x080017e4
 800061c:	20000008 	.word	0x20000008
 8000620:	20000098 	.word	0x20000098

08000624 <voidEspValidateCmd>:




u8 voidEspValidateCmd(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b09a      	sub	sp, #104	; 0x68
 8000628:	af00      	add	r7, sp, #0
	u8 Local_u8Response[100] = {0};
 800062a:	2300      	movs	r3, #0
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	2260      	movs	r2, #96	; 0x60
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fc63 	bl	8000f00 <memset>
	u8 Result = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67


	while (1)
	{
		UART_voidReciveAsyn(Local_u8Response, 2 ,&Notifiactoin);
 8000640:	463b      	mov	r3, r7
 8000642:	4a0a      	ldr	r2, [pc, #40]	; (800066c <voidEspValidateCmd+0x48>)
 8000644:	2102      	movs	r1, #2
 8000646:	4618      	mov	r0, r3
 8000648:	f000 fb16 	bl	8000c78 <UART_voidReciveAsyn>

		/* Check if Ok */
		if (Local_u8Response[0] == 'O' && Local_u8Response[1] == 'K')
 800064c:	783b      	ldrb	r3, [r7, #0]
 800064e:	2b4f      	cmp	r3, #79	; 0x4f
 8000650:	d1f6      	bne.n	8000640 <voidEspValidateCmd+0x1c>
 8000652:	787b      	ldrb	r3, [r7, #1]
 8000654:	2b4b      	cmp	r3, #75	; 0x4b
 8000656:	d1f3      	bne.n	8000640 <voidEspValidateCmd+0x1c>
		{
			Result = 1;
 8000658:	2301      	movs	r3, #1
 800065a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			break;
 800065e:	bf00      	nop
		}
	}

	return Result;
 8000660:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000664:	4618      	mov	r0, r3
 8000666:	3768      	adds	r7, #104	; 0x68
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	080007d1 	.word	0x080007d1

08000670 <voidEspValidateCmd2>:

u8 voidEspValidateCmd2(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b09a      	sub	sp, #104	; 0x68
 8000674:	af00      	add	r7, sp, #0
	u8 Local_u8Response[100] = {0};
 8000676:	2300      	movs	r3, #0
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2260      	movs	r2, #96	; 0x60
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fc3d 	bl	8000f00 <memset>
	u8 Result = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67


	while (1)
	{
		UART_voidReciveAsyn(Local_u8Response,51,&Notifiactoin);
 800068c:	463b      	mov	r3, r7
 800068e:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <voidEspValidateCmd2+0x4c>)
 8000690:	2133      	movs	r1, #51	; 0x33
 8000692:	4618      	mov	r0, r3
 8000694:	f000 faf0 	bl	8000c78 <UART_voidReciveAsyn>

		/* Check if Ok */
		if (Local_u8Response[48] == 'O' && Local_u8Response[49] == 'K')
 8000698:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800069c:	2b4f      	cmp	r3, #79	; 0x4f
 800069e:	d1f5      	bne.n	800068c <voidEspValidateCmd2+0x1c>
 80006a0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80006a4:	2b4b      	cmp	r3, #75	; 0x4b
 80006a6:	d1f1      	bne.n	800068c <voidEspValidateCmd2+0x1c>
		{
			Result = 1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			break;
 80006ae:	bf00      	nop
		}
	}

	return Result;
 80006b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3768      	adds	r7, #104	; 0x68
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	080007d1 	.word	0x080007d1

080006c0 <voidEspValidateCmd3>:


u8 voidEspValidateCmd3(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b09a      	sub	sp, #104	; 0x68
 80006c4:	af00      	add	r7, sp, #0
	u8 Local_u8Response[100] = {0};
 80006c6:	2300      	movs	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2260      	movs	r2, #96	; 0x60
 80006ce:	2100      	movs	r1, #0
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fc15 	bl	8000f00 <memset>
	u8 Result = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	static u8 Local = 0 ;
	if (Local == 0)
 80006dc:	4b17      	ldr	r3, [pc, #92]	; (800073c <voidEspValidateCmd3+0x7c>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d113      	bne.n	800070c <voidEspValidateCmd3+0x4c>
	{
		while (1)
		{
			UART_voidReciveAsyn(Local_u8Response, 2 ,&Notifiactoin);
 80006e4:	463b      	mov	r3, r7
 80006e6:	4a16      	ldr	r2, [pc, #88]	; (8000740 <voidEspValidateCmd3+0x80>)
 80006e8:	2102      	movs	r1, #2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 fac4 	bl	8000c78 <UART_voidReciveAsyn>

			/* Check if Ok */
			if (Local_u8Response[0] == 'O' && Local_u8Response[1] == 'K')
 80006f0:	783b      	ldrb	r3, [r7, #0]
 80006f2:	2b4f      	cmp	r3, #79	; 0x4f
 80006f4:	d1f6      	bne.n	80006e4 <voidEspValidateCmd3+0x24>
 80006f6:	787b      	ldrb	r3, [r7, #1]
 80006f8:	2b4b      	cmp	r3, #75	; 0x4b
 80006fa:	d1f3      	bne.n	80006e4 <voidEspValidateCmd3+0x24>
			{
				Result = 1;
 80006fc:	2301      	movs	r3, #1
 80006fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000702:	bf00      	nop
			}
		}
		Local = 1 ;
 8000704:	4b0d      	ldr	r3, [pc, #52]	; (800073c <voidEspValidateCmd3+0x7c>)
 8000706:	2201      	movs	r2, #1
 8000708:	701a      	strb	r2, [r3, #0]
 800070a:	e010      	b.n	800072e <voidEspValidateCmd3+0x6e>

	else
	{
		while (1)
		{
			UART_voidReciveAsyn(Local_u8Response, 100 ,&Notifiactoin);
 800070c:	463b      	mov	r3, r7
 800070e:	4a0c      	ldr	r2, [pc, #48]	; (8000740 <voidEspValidateCmd3+0x80>)
 8000710:	2164      	movs	r1, #100	; 0x64
 8000712:	4618      	mov	r0, r3
 8000714:	f000 fab0 	bl	8000c78 <UART_voidReciveAsyn>

			/* Check if Ok */
			if (Local_u8Response[64] == 'O' && Local_u8Response[65] == 'K')
 8000718:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800071c:	2b4f      	cmp	r3, #79	; 0x4f
 800071e:	d1f5      	bne.n	800070c <voidEspValidateCmd3+0x4c>
 8000720:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8000724:	2b4b      	cmp	r3, #75	; 0x4b
 8000726:	d1f1      	bne.n	800070c <voidEspValidateCmd3+0x4c>
			{
				Result = 1;
 8000728:	2301      	movs	r3, #1
 800072a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
			}
		}
	}
	return Result;
 800072e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000732:	4618      	mov	r0, r3
 8000734:	3768      	adds	r7, #104	; 0x68
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200000fc 	.word	0x200000fc
 8000740:	080007d1 	.word	0x080007d1

08000744 <voidEspValidateCmd5>:



u8 voidEspValidateCmd5(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b09a      	sub	sp, #104	; 0x68
 8000748:	af00      	add	r7, sp, #0
	u8 Local_u8Response[100] = {0};
 800074a:	2300      	movs	r3, #0
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2260      	movs	r2, #96	; 0x60
 8000752:	2100      	movs	r1, #0
 8000754:	4618      	mov	r0, r3
 8000756:	f000 fbd3 	bl	8000f00 <memset>
	u8 Result = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67


	while (1)
	{
		UART_voidReciveAsyn(Local_u8Response, 2 ,&Notifiactoin);
 8000760:	463b      	mov	r3, r7
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <voidEspValidateCmd5+0x48>)
 8000764:	2102      	movs	r1, #2
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fa86 	bl	8000c78 <UART_voidReciveAsyn>

		/* Check if Ok */
		if (Local_u8Response[0] == 'O' && Local_u8Response[1] == 'K')
 800076c:	783b      	ldrb	r3, [r7, #0]
 800076e:	2b4f      	cmp	r3, #79	; 0x4f
 8000770:	d1f6      	bne.n	8000760 <voidEspValidateCmd5+0x1c>
 8000772:	787b      	ldrb	r3, [r7, #1]
 8000774:	2b4b      	cmp	r3, #75	; 0x4b
 8000776:	d1f3      	bne.n	8000760 <voidEspValidateCmd5+0x1c>
		{
			Result = 1;
 8000778:	2301      	movs	r3, #1
 800077a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			break;
 800077e:	bf00      	nop
		}
	}

	return Result;
 8000780:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000784:	4618      	mov	r0, r3
 8000786:	3768      	adds	r7, #104	; 0x68
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	080007d1 	.word	0x080007d1

08000790 <voidEspValidateCmd4>:


u8 voidEspValidateCmd4(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
	u8 Result = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	71fb      	strb	r3, [r7, #7]


	while (1)
	{

		UART_voidReciveAsyn(Local_u8Response1,100,&Notifiactoin);
 800079a:	4a0b      	ldr	r2, [pc, #44]	; (80007c8 <voidEspValidateCmd4+0x38>)
 800079c:	2164      	movs	r1, #100	; 0x64
 800079e:	480b      	ldr	r0, [pc, #44]	; (80007cc <voidEspValidateCmd4+0x3c>)
 80007a0:	f000 fa6a 	bl	8000c78 <UART_voidReciveAsyn>

		/* Check if Ok */
		if (Local_u8Response1[50] == '1' || Local_u8Response1[50] == '0' )
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <voidEspValidateCmd4+0x3c>)
 80007a6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80007aa:	2b31      	cmp	r3, #49	; 0x31
 80007ac:	d004      	beq.n	80007b8 <voidEspValidateCmd4+0x28>
 80007ae:	4b07      	ldr	r3, [pc, #28]	; (80007cc <voidEspValidateCmd4+0x3c>)
 80007b0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80007b4:	2b30      	cmp	r3, #48	; 0x30
 80007b6:	d1f0      	bne.n	800079a <voidEspValidateCmd4+0xa>
		{
			Result = 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	71fb      	strb	r3, [r7, #7]
			break;
 80007bc:	bf00      	nop
		}
	}

	return Result;
 80007be:	79fb      	ldrb	r3, [r7, #7]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	080007d1 	.word	0x080007d1
 80007cc:	20000098 	.word	0x20000098

080007d0 <Notifiactoin>:


void Notifiactoin(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
	...

080007e0 <GPIO_voidSetPinMode>:

/**************************************************************************************/
/**************************************************************************************/
/**************************************************************************************/

void GPIO_voidSetPinMode(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinMode){
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
 80007ea:	460b      	mov	r3, r1
 80007ec:	71bb      	strb	r3, [r7, #6]
 80007ee:	4613      	mov	r3, r2
 80007f0:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8PortID)
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b02      	cmp	r3, #2
 80007f6:	d01e      	beq.n	8000836 <GPIO_voidSetPinMode+0x56>
 80007f8:	2b02      	cmp	r3, #2
 80007fa:	dc28      	bgt.n	800084e <GPIO_voidSetPinMode+0x6e>
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d002      	beq.n	8000806 <GPIO_voidSetPinMode+0x26>
 8000800:	2b01      	cmp	r3, #1
 8000802:	d00c      	beq.n	800081e <GPIO_voidSetPinMode+0x3e>
	case GPIO_PORTA:GPIOA->GPIO_MODER|= (Copy_u8PinMode << ( Copy_u8PinID * 2))	;break;
	case GPIO_PORTB:GPIOB->GPIO_MODER|= (Copy_u8PinMode << ( Copy_u8PinID * 2))	;break;
	case GPIO_PORTC:GPIOC->GPIO_MODER|= (Copy_u8PinMode << ( Copy_u8PinID * 2))	;break;

	}
}
 8000804:	e023      	b.n	800084e <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTA:GPIOA->GPIO_MODER|= (Copy_u8PinMode << ( Copy_u8PinID * 2))	;break;
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <GPIO_voidSetPinMode+0x7c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	7979      	ldrb	r1, [r7, #5]
 800080c:	79ba      	ldrb	r2, [r7, #6]
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	fa01 f202 	lsl.w	r2, r1, r2
 8000814:	4611      	mov	r1, r2
 8000816:	4a11      	ldr	r2, [pc, #68]	; (800085c <GPIO_voidSetPinMode+0x7c>)
 8000818:	430b      	orrs	r3, r1
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	e017      	b.n	800084e <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTB:GPIOB->GPIO_MODER|= (Copy_u8PinMode << ( Copy_u8PinID * 2))	;break;
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <GPIO_voidSetPinMode+0x80>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	7979      	ldrb	r1, [r7, #5]
 8000824:	79ba      	ldrb	r2, [r7, #6]
 8000826:	0052      	lsls	r2, r2, #1
 8000828:	fa01 f202 	lsl.w	r2, r1, r2
 800082c:	4611      	mov	r1, r2
 800082e:	4a0c      	ldr	r2, [pc, #48]	; (8000860 <GPIO_voidSetPinMode+0x80>)
 8000830:	430b      	orrs	r3, r1
 8000832:	6013      	str	r3, [r2, #0]
 8000834:	e00b      	b.n	800084e <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTC:GPIOC->GPIO_MODER|= (Copy_u8PinMode << ( Copy_u8PinID * 2))	;break;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <GPIO_voidSetPinMode+0x84>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	7979      	ldrb	r1, [r7, #5]
 800083c:	79ba      	ldrb	r2, [r7, #6]
 800083e:	0052      	lsls	r2, r2, #1
 8000840:	fa01 f202 	lsl.w	r2, r1, r2
 8000844:	4611      	mov	r1, r2
 8000846:	4a07      	ldr	r2, [pc, #28]	; (8000864 <GPIO_voidSetPinMode+0x84>)
 8000848:	430b      	orrs	r3, r1
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	bf00      	nop
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40020000 	.word	0x40020000
 8000860:	40020400 	.word	0x40020400
 8000864:	40020800 	.word	0x40020800

08000868 <GPIO_voidSetPinALTF>:


void GPIO_voidSetPinALTF(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinALTF)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	71fb      	strb	r3, [r7, #7]
 8000872:	460b      	mov	r3, r1
 8000874:	71bb      	strb	r3, [r7, #6]
 8000876:	4613      	mov	r3, r2
 8000878:	717b      	strb	r3, [r7, #5]


	if(Copy_u8PinID>=0 && Copy_u8PinID<8)
 800087a:	79bb      	ldrb	r3, [r7, #6]
 800087c:	2b07      	cmp	r3, #7
 800087e:	d82d      	bhi.n	80008dc <GPIO_voidSetPinALTF+0x74>
	{
		switch(Copy_u8PortID)
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	2b02      	cmp	r3, #2
 8000884:	d01e      	beq.n	80008c4 <GPIO_voidSetPinALTF+0x5c>
 8000886:	2b02      	cmp	r3, #2
 8000888:	dc5c      	bgt.n	8000944 <GPIO_voidSetPinALTF+0xdc>
 800088a:	2b00      	cmp	r3, #0
 800088c:	d002      	beq.n	8000894 <GPIO_voidSetPinALTF+0x2c>
 800088e:	2b01      	cmp	r3, #1
 8000890:	d00c      	beq.n	80008ac <GPIO_voidSetPinALTF+0x44>
		case GPIO_PORTC: GPIOC->GPIO_AFR[1]|=(u32)(Copy_u8PinALTF<<(4*(Copy_u8PinID %8)));break;

		}
	}

}
 8000892:	e057      	b.n	8000944 <GPIO_voidSetPinALTF+0xdc>
		case GPIO_PORTA:GPIOA->GPIO_AFR[0]|=(u32)(Copy_u8PinALTF<<(4*Copy_u8PinID));break;
 8000894:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <GPIO_voidSetPinALTF+0xe8>)
 8000896:	6a1b      	ldr	r3, [r3, #32]
 8000898:	7979      	ldrb	r1, [r7, #5]
 800089a:	79ba      	ldrb	r2, [r7, #6]
 800089c:	0092      	lsls	r2, r2, #2
 800089e:	fa01 f202 	lsl.w	r2, r1, r2
 80008a2:	4611      	mov	r1, r2
 80008a4:	4a2a      	ldr	r2, [pc, #168]	; (8000950 <GPIO_voidSetPinALTF+0xe8>)
 80008a6:	430b      	orrs	r3, r1
 80008a8:	6213      	str	r3, [r2, #32]
 80008aa:	e04b      	b.n	8000944 <GPIO_voidSetPinALTF+0xdc>
		case GPIO_PORTB:GPIOB->GPIO_AFR[0]|=(u32)(Copy_u8PinALTF<<(4*Copy_u8PinID));break;
 80008ac:	4b29      	ldr	r3, [pc, #164]	; (8000954 <GPIO_voidSetPinALTF+0xec>)
 80008ae:	6a1b      	ldr	r3, [r3, #32]
 80008b0:	7979      	ldrb	r1, [r7, #5]
 80008b2:	79ba      	ldrb	r2, [r7, #6]
 80008b4:	0092      	lsls	r2, r2, #2
 80008b6:	fa01 f202 	lsl.w	r2, r1, r2
 80008ba:	4611      	mov	r1, r2
 80008bc:	4a25      	ldr	r2, [pc, #148]	; (8000954 <GPIO_voidSetPinALTF+0xec>)
 80008be:	430b      	orrs	r3, r1
 80008c0:	6213      	str	r3, [r2, #32]
 80008c2:	e03f      	b.n	8000944 <GPIO_voidSetPinALTF+0xdc>
		case GPIO_PORTC:GPIOC->GPIO_AFR[0]|=(u32)(Copy_u8PinALTF<<(4*Copy_u8PinID));break;
 80008c4:	4b24      	ldr	r3, [pc, #144]	; (8000958 <GPIO_voidSetPinALTF+0xf0>)
 80008c6:	6a1b      	ldr	r3, [r3, #32]
 80008c8:	7979      	ldrb	r1, [r7, #5]
 80008ca:	79ba      	ldrb	r2, [r7, #6]
 80008cc:	0092      	lsls	r2, r2, #2
 80008ce:	fa01 f202 	lsl.w	r2, r1, r2
 80008d2:	4611      	mov	r1, r2
 80008d4:	4a20      	ldr	r2, [pc, #128]	; (8000958 <GPIO_voidSetPinALTF+0xf0>)
 80008d6:	430b      	orrs	r3, r1
 80008d8:	6213      	str	r3, [r2, #32]
 80008da:	e033      	b.n	8000944 <GPIO_voidSetPinALTF+0xdc>
		switch(Copy_u8PortID)
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d022      	beq.n	8000928 <GPIO_voidSetPinALTF+0xc0>
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	dc2e      	bgt.n	8000944 <GPIO_voidSetPinALTF+0xdc>
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d002      	beq.n	80008f0 <GPIO_voidSetPinALTF+0x88>
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d00e      	beq.n	800090c <GPIO_voidSetPinALTF+0xa4>
}
 80008ee:	e029      	b.n	8000944 <GPIO_voidSetPinALTF+0xdc>
		case GPIO_PORTA :GPIOA->GPIO_AFR[1]|=(u32)(Copy_u8PinALTF<<(4*(Copy_u8PinID %8)));break;
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <GPIO_voidSetPinALTF+0xe8>)
 80008f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008f4:	7979      	ldrb	r1, [r7, #5]
 80008f6:	79ba      	ldrb	r2, [r7, #6]
 80008f8:	f002 0207 	and.w	r2, r2, #7
 80008fc:	0092      	lsls	r2, r2, #2
 80008fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000902:	4611      	mov	r1, r2
 8000904:	4a12      	ldr	r2, [pc, #72]	; (8000950 <GPIO_voidSetPinALTF+0xe8>)
 8000906:	430b      	orrs	r3, r1
 8000908:	6253      	str	r3, [r2, #36]	; 0x24
 800090a:	e01b      	b.n	8000944 <GPIO_voidSetPinALTF+0xdc>
		case GPIO_PORTB: GPIOB->GPIO_AFR[1]|=(u32)(Copy_u8PinALTF<<(4*(Copy_u8PinID %8)));break;
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <GPIO_voidSetPinALTF+0xec>)
 800090e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000910:	7979      	ldrb	r1, [r7, #5]
 8000912:	79ba      	ldrb	r2, [r7, #6]
 8000914:	f002 0207 	and.w	r2, r2, #7
 8000918:	0092      	lsls	r2, r2, #2
 800091a:	fa01 f202 	lsl.w	r2, r1, r2
 800091e:	4611      	mov	r1, r2
 8000920:	4a0c      	ldr	r2, [pc, #48]	; (8000954 <GPIO_voidSetPinALTF+0xec>)
 8000922:	430b      	orrs	r3, r1
 8000924:	6253      	str	r3, [r2, #36]	; 0x24
 8000926:	e00d      	b.n	8000944 <GPIO_voidSetPinALTF+0xdc>
		case GPIO_PORTC: GPIOC->GPIO_AFR[1]|=(u32)(Copy_u8PinALTF<<(4*(Copy_u8PinID %8)));break;
 8000928:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <GPIO_voidSetPinALTF+0xf0>)
 800092a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800092c:	7979      	ldrb	r1, [r7, #5]
 800092e:	79ba      	ldrb	r2, [r7, #6]
 8000930:	f002 0207 	and.w	r2, r2, #7
 8000934:	0092      	lsls	r2, r2, #2
 8000936:	fa01 f202 	lsl.w	r2, r1, r2
 800093a:	4611      	mov	r1, r2
 800093c:	4a06      	ldr	r2, [pc, #24]	; (8000958 <GPIO_voidSetPinALTF+0xf0>)
 800093e:	430b      	orrs	r3, r1
 8000940:	6253      	str	r3, [r2, #36]	; 0x24
 8000942:	bf00      	nop
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	40020000 	.word	0x40020000
 8000954:	40020400 	.word	0x40020400
 8000958:	40020800 	.word	0x40020800

0800095c <GPIO_voidSetPinVal>:



void GPIO_voidSetPinVal(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinVal){
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
 8000966:	460b      	mov	r3, r1
 8000968:	71bb      	strb	r3, [r7, #6]
 800096a:	4613      	mov	r3, r2
 800096c:	717b      	strb	r3, [r7, #5]

	if(Copy_u8PinVal==PIN_SET)
 800096e:	797b      	ldrb	r3, [r7, #5]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d12a      	bne.n	80009ca <GPIO_voidSetPinVal+0x6e>
	{
		switch(Copy_u8PortID)
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	2b02      	cmp	r3, #2
 8000978:	d01c      	beq.n	80009b4 <GPIO_voidSetPinVal+0x58>
 800097a:	2b02      	cmp	r3, #2
 800097c:	dc57      	bgt.n	8000a2e <GPIO_voidSetPinVal+0xd2>
 800097e:	2b00      	cmp	r3, #0
 8000980:	d002      	beq.n	8000988 <GPIO_voidSetPinVal+0x2c>
 8000982:	2b01      	cmp	r3, #1
 8000984:	d00b      	beq.n	800099e <GPIO_voidSetPinVal+0x42>
		case GPIO_PORTA:CLEAR_BIT(GPIOA->GPIO_ODR,Copy_u8PinID);break;
		case GPIO_PORTB:CLEAR_BIT(GPIOB->GPIO_ODR,Copy_u8PinID);break;
		case GPIO_PORTC:CLEAR_BIT(GPIOC->GPIO_ODR,Copy_u8PinID);break;
		}
	}
}
 8000986:	e052      	b.n	8000a2e <GPIO_voidSetPinVal+0xd2>
		case GPIO_PORTA:SET_BIT(GPIOA->GPIO_ODR,Copy_u8PinID);break;
 8000988:	4b2c      	ldr	r3, [pc, #176]	; (8000a3c <GPIO_voidSetPinVal+0xe0>)
 800098a:	695b      	ldr	r3, [r3, #20]
 800098c:	79ba      	ldrb	r2, [r7, #6]
 800098e:	2101      	movs	r1, #1
 8000990:	fa01 f202 	lsl.w	r2, r1, r2
 8000994:	4611      	mov	r1, r2
 8000996:	4a29      	ldr	r2, [pc, #164]	; (8000a3c <GPIO_voidSetPinVal+0xe0>)
 8000998:	430b      	orrs	r3, r1
 800099a:	6153      	str	r3, [r2, #20]
 800099c:	e047      	b.n	8000a2e <GPIO_voidSetPinVal+0xd2>
		case GPIO_PORTB:SET_BIT(GPIOB->GPIO_ODR,Copy_u8PinID);break;
 800099e:	4b28      	ldr	r3, [pc, #160]	; (8000a40 <GPIO_voidSetPinVal+0xe4>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	79ba      	ldrb	r2, [r7, #6]
 80009a4:	2101      	movs	r1, #1
 80009a6:	fa01 f202 	lsl.w	r2, r1, r2
 80009aa:	4611      	mov	r1, r2
 80009ac:	4a24      	ldr	r2, [pc, #144]	; (8000a40 <GPIO_voidSetPinVal+0xe4>)
 80009ae:	430b      	orrs	r3, r1
 80009b0:	6153      	str	r3, [r2, #20]
 80009b2:	e03c      	b.n	8000a2e <GPIO_voidSetPinVal+0xd2>
		case GPIO_PORTC:SET_BIT(GPIOC->GPIO_ODR,Copy_u8PinID);break;
 80009b4:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <GPIO_voidSetPinVal+0xe8>)
 80009b6:	695b      	ldr	r3, [r3, #20]
 80009b8:	79ba      	ldrb	r2, [r7, #6]
 80009ba:	2101      	movs	r1, #1
 80009bc:	fa01 f202 	lsl.w	r2, r1, r2
 80009c0:	4611      	mov	r1, r2
 80009c2:	4a20      	ldr	r2, [pc, #128]	; (8000a44 <GPIO_voidSetPinVal+0xe8>)
 80009c4:	430b      	orrs	r3, r1
 80009c6:	6153      	str	r3, [r2, #20]
 80009c8:	e031      	b.n	8000a2e <GPIO_voidSetPinVal+0xd2>
	else if(Copy_u8PinVal==PIN_RESET)
 80009ca:	797b      	ldrb	r3, [r7, #5]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d12d      	bne.n	8000a2c <GPIO_voidSetPinVal+0xd0>
		switch(Copy_u8PortID)
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d01e      	beq.n	8000a14 <GPIO_voidSetPinVal+0xb8>
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	dc29      	bgt.n	8000a2e <GPIO_voidSetPinVal+0xd2>
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d002      	beq.n	80009e4 <GPIO_voidSetPinVal+0x88>
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d00c      	beq.n	80009fc <GPIO_voidSetPinVal+0xa0>
}
 80009e2:	e024      	b.n	8000a2e <GPIO_voidSetPinVal+0xd2>
		case GPIO_PORTA:CLEAR_BIT(GPIOA->GPIO_ODR,Copy_u8PinID);break;
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <GPIO_voidSetPinVal+0xe0>)
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	79ba      	ldrb	r2, [r7, #6]
 80009ea:	2101      	movs	r1, #1
 80009ec:	fa01 f202 	lsl.w	r2, r1, r2
 80009f0:	43d2      	mvns	r2, r2
 80009f2:	4611      	mov	r1, r2
 80009f4:	4a11      	ldr	r2, [pc, #68]	; (8000a3c <GPIO_voidSetPinVal+0xe0>)
 80009f6:	400b      	ands	r3, r1
 80009f8:	6153      	str	r3, [r2, #20]
 80009fa:	e018      	b.n	8000a2e <GPIO_voidSetPinVal+0xd2>
		case GPIO_PORTB:CLEAR_BIT(GPIOB->GPIO_ODR,Copy_u8PinID);break;
 80009fc:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <GPIO_voidSetPinVal+0xe4>)
 80009fe:	695b      	ldr	r3, [r3, #20]
 8000a00:	79ba      	ldrb	r2, [r7, #6]
 8000a02:	2101      	movs	r1, #1
 8000a04:	fa01 f202 	lsl.w	r2, r1, r2
 8000a08:	43d2      	mvns	r2, r2
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4a0c      	ldr	r2, [pc, #48]	; (8000a40 <GPIO_voidSetPinVal+0xe4>)
 8000a0e:	400b      	ands	r3, r1
 8000a10:	6153      	str	r3, [r2, #20]
 8000a12:	e00c      	b.n	8000a2e <GPIO_voidSetPinVal+0xd2>
		case GPIO_PORTC:CLEAR_BIT(GPIOC->GPIO_ODR,Copy_u8PinID);break;
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <GPIO_voidSetPinVal+0xe8>)
 8000a16:	695b      	ldr	r3, [r3, #20]
 8000a18:	79ba      	ldrb	r2, [r7, #6]
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a20:	43d2      	mvns	r2, r2
 8000a22:	4611      	mov	r1, r2
 8000a24:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <GPIO_voidSetPinVal+0xe8>)
 8000a26:	400b      	ands	r3, r1
 8000a28:	6153      	str	r3, [r2, #20]
 8000a2a:	e000      	b.n	8000a2e <GPIO_voidSetPinVal+0xd2>
	}
 8000a2c:	bf00      	nop
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40020000 	.word	0x40020000
 8000a40:	40020400 	.word	0x40020400
 8000a44:	40020800 	.word	0x40020800

08000a48 <MCL_RCC_vInitSysClk>:

const u8 APBPrescTable[8U] = {0, 0, 0, 0, 1, 2, 3, 4}; //shift right by 1 = divide by 2;

const u8 AHBPrescTable[16U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9}; //shift right by 1 = divide by 2;

void MCL_RCC_vInitSysClk(RCC_CfgType *Cp_xRCC_Cfg) {
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	/********Enable All System Clocks***********/
	RCC->RCC_CR.HSION = 1;
 8000a50:	4a25      	ldr	r2, [pc, #148]	; (8000ae8 <MCL_RCC_vInitSysClk+0xa0>)
 8000a52:	6813      	ldr	r3, [r2, #0]
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6013      	str	r3, [r2, #0]
	RCC->RCC_CR.HSEON = 1;
 8000a5a:	4a23      	ldr	r2, [pc, #140]	; (8000ae8 <MCL_RCC_vInitSysClk+0xa0>)
 8000a5c:	6813      	ldr	r3, [r2, #0]
 8000a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a62:	6013      	str	r3, [r2, #0]
	RCC->RCC_CR.PLLON = 1;
 8000a64:	4a20      	ldr	r2, [pc, #128]	; (8000ae8 <MCL_RCC_vInitSysClk+0xa0>)
 8000a66:	6813      	ldr	r3, [r2, #0]
 8000a68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a6c:	6013      	str	r3, [r2, #0]

	/************Select System Clock***********/
	RCC->RCC_CFGR_bits.SWn = Cp_xRCC_Cfg->System_ClkSelection;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	4a1d      	ldr	r2, [pc, #116]	; (8000ae8 <MCL_RCC_vInitSysClk+0xa0>)
 8000a74:	f003 0303 	and.w	r3, r3, #3
 8000a78:	b2d9      	uxtb	r1, r3
 8000a7a:	6893      	ldr	r3, [r2, #8]
 8000a7c:	f361 0301 	bfi	r3, r1, #0, #2
 8000a80:	6093      	str	r3, [r2, #8]
	/************Select System Clock Type***********/
	RCC->RCC_CR.HSEBYP = Cp_xRCC_Cfg->System_ClkType;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	7a9b      	ldrb	r3, [r3, #10]
 8000a86:	4a18      	ldr	r2, [pc, #96]	; (8000ae8 <MCL_RCC_vInitSysClk+0xa0>)
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	b2d9      	uxtb	r1, r3
 8000a8e:	6813      	ldr	r3, [r2, #0]
 8000a90:	f361 4392 	bfi	r3, r1, #18, #1
 8000a94:	6013      	str	r3, [r2, #0]
	switch (Cp_xRCC_Cfg->System_ClkSelection) {
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b02      	cmp	r3, #2
 8000a9c:	d01c      	beq.n	8000ad8 <MCL_RCC_vInitSysClk+0x90>
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	dc1b      	bgt.n	8000ada <MCL_RCC_vInitSysClk+0x92>
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d002      	beq.n	8000aac <MCL_RCC_vInitSysClk+0x64>
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d00b      	beq.n	8000ac2 <MCL_RCC_vInitSysClk+0x7a>
			RCC->RCC_CFGR_bits.RTCPRE = Cp_xRCC_Cfg->System_ClkPrescaler;
			break;
		case PLL_CLOCK:
			break;
	}
}
 8000aaa:	e016      	b.n	8000ada <MCL_RCC_vInitSysClk+0x92>
			RCC->RCC_CFGR_bits.HPRE = Cp_xRCC_Cfg->System_ClkPrescaler;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	891b      	ldrh	r3, [r3, #8]
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <MCL_RCC_vInitSysClk+0xa0>)
 8000ab2:	f003 030f 	and.w	r3, r3, #15
 8000ab6:	b2d9      	uxtb	r1, r3
 8000ab8:	6893      	ldr	r3, [r2, #8]
 8000aba:	f361 1307 	bfi	r3, r1, #4, #4
 8000abe:	6093      	str	r3, [r2, #8]
			break;
 8000ac0:	e00b      	b.n	8000ada <MCL_RCC_vInitSysClk+0x92>
			RCC->RCC_CFGR_bits.RTCPRE = Cp_xRCC_Cfg->System_ClkPrescaler;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	891b      	ldrh	r3, [r3, #8]
 8000ac6:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <MCL_RCC_vInitSysClk+0xa0>)
 8000ac8:	f003 031f 	and.w	r3, r3, #31
 8000acc:	b2d9      	uxtb	r1, r3
 8000ace:	6893      	ldr	r3, [r2, #8]
 8000ad0:	f361 4314 	bfi	r3, r1, #16, #5
 8000ad4:	6093      	str	r3, [r2, #8]
			break;
 8000ad6:	e000      	b.n	8000ada <MCL_RCC_vInitSysClk+0x92>
			break;
 8000ad8:	bf00      	nop
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800

08000aec <MCL_RCC_vEnablePeriphClk>:

void MCL_RCC_vEnablePeriphClk(SysBus_t Cp_u8Bus, u8 Cp_u8Periph) {
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	460a      	mov	r2, r1
 8000af6:	71fb      	strb	r3, [r7, #7]
 8000af8:	4613      	mov	r3, r2
 8000afa:	71bb      	strb	r3, [r7, #6]
	switch (Cp_u8Bus) {
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	2b03      	cmp	r3, #3
 8000b00:	d836      	bhi.n	8000b70 <MCL_RCC_vEnablePeriphClk+0x84>
 8000b02:	a201      	add	r2, pc, #4	; (adr r2, 8000b08 <MCL_RCC_vEnablePeriphClk+0x1c>)
 8000b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b08:	08000b45 	.word	0x08000b45
 8000b0c:	08000b5b 	.word	0x08000b5b
 8000b10:	08000b19 	.word	0x08000b19
 8000b14:	08000b2f 	.word	0x08000b2f
		case AHB1_BUS  :
			SET_BIT(RCC->RCC_AHB1ENR, Cp_u8Periph);
 8000b18:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <MCL_RCC_vEnablePeriphClk+0x94>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	79ba      	ldrb	r2, [r7, #6]
 8000b1e:	2101      	movs	r1, #1
 8000b20:	fa01 f202 	lsl.w	r2, r1, r2
 8000b24:	4611      	mov	r1, r2
 8000b26:	4a16      	ldr	r2, [pc, #88]	; (8000b80 <MCL_RCC_vEnablePeriphClk+0x94>)
 8000b28:	430b      	orrs	r3, r1
 8000b2a:	6313      	str	r3, [r2, #48]	; 0x30
			break;
 8000b2c:	e021      	b.n	8000b72 <MCL_RCC_vEnablePeriphClk+0x86>
		case AHB2_BUS  :
			SET_BIT(RCC->RCC_AHB2ENR, Cp_u8Periph);
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MCL_RCC_vEnablePeriphClk+0x94>)
 8000b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b32:	79ba      	ldrb	r2, [r7, #6]
 8000b34:	2101      	movs	r1, #1
 8000b36:	fa01 f202 	lsl.w	r2, r1, r2
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4a10      	ldr	r2, [pc, #64]	; (8000b80 <MCL_RCC_vEnablePeriphClk+0x94>)
 8000b3e:	430b      	orrs	r3, r1
 8000b40:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000b42:	e016      	b.n	8000b72 <MCL_RCC_vEnablePeriphClk+0x86>
		case APB1_BUS  :
			SET_BIT(RCC->RCC_APB1ENR, Cp_u8Periph);
 8000b44:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MCL_RCC_vEnablePeriphClk+0x94>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	79ba      	ldrb	r2, [r7, #6]
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b50:	4611      	mov	r1, r2
 8000b52:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <MCL_RCC_vEnablePeriphClk+0x94>)
 8000b54:	430b      	orrs	r3, r1
 8000b56:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8000b58:	e00b      	b.n	8000b72 <MCL_RCC_vEnablePeriphClk+0x86>
		case APB2_BUS  :
			SET_BIT(RCC->RCC_APB2ENR, Cp_u8Periph);
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MCL_RCC_vEnablePeriphClk+0x94>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	79ba      	ldrb	r2, [r7, #6]
 8000b60:	2101      	movs	r1, #1
 8000b62:	fa01 f202 	lsl.w	r2, r1, r2
 8000b66:	4611      	mov	r1, r2
 8000b68:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <MCL_RCC_vEnablePeriphClk+0x94>)
 8000b6a:	430b      	orrs	r3, r1
 8000b6c:	6453      	str	r3, [r2, #68]	; 0x44
			break;
 8000b6e:	e000      	b.n	8000b72 <MCL_RCC_vEnablePeriphClk+0x86>
		default    : /* ERROR*/         break;
 8000b70:	bf00      	nop
	}
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800

08000b84 <MCL_STK_vInit>:
#include "../inc/MCAL_STK_Interface.h"
#include "../inc/MCAL_STK_Private.h"

void (*Global_STKCallBackPtr)(void) = NULL_PTR;

void MCL_STK_vInit(STK_CfgType *Cp_STK_Cfg) {
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	/* Disable SysTick */
	STK->STK_CTRL = 0;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MCL_STK_vInit+0x54>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
	STK->STK_CTRL_Bits.CLKSOURCE = Cp_STK_Cfg->SysTick_ClkSrc;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	4a10      	ldr	r2, [pc, #64]	; (8000bd8 <MCL_STK_vInit+0x54>)
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	b2d9      	uxtb	r1, r3
 8000b9e:	6813      	ldr	r3, [r2, #0]
 8000ba0:	f361 0382 	bfi	r3, r1, #2, #1
 8000ba4:	6013      	str	r3, [r2, #0]

	if (Cp_STK_Cfg->SysTick_Exception != DISABLE_EXCEPTION) {
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	785b      	ldrb	r3, [r3, #1]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d00d      	beq.n	8000bca <MCL_STK_vInit+0x46>
		if (Cp_STK_Cfg->Systick_CallBackPtr != NULL_PTR)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d004      	beq.n	8000bc0 <MCL_STK_vInit+0x3c>
			Global_STKCallBackPtr = Cp_STK_Cfg->Systick_CallBackPtr;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	4a08      	ldr	r2, [pc, #32]	; (8000bdc <MCL_STK_vInit+0x58>)
 8000bbc:	6013      	str	r3, [r2, #0]
		else
			STK->STK_CTRL_Bits.TICKINT = DISABLE_STATE;
	}
}
 8000bbe:	e004      	b.n	8000bca <MCL_STK_vInit+0x46>
			STK->STK_CTRL_Bits.TICKINT = DISABLE_STATE;
 8000bc0:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <MCL_STK_vInit+0x54>)
 8000bc2:	6813      	ldr	r3, [r2, #0]
 8000bc4:	f36f 0341 	bfc	r3, #1, #1
 8000bc8:	6013      	str	r3, [r2, #0]
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000e010 	.word	0xe000e010
 8000bdc:	20000108 	.word	0x20000108

08000be0 <UART_voidInit>:
static void (* UART1_CallBack) (void) = NULL ;

u8  G_u8AMessage[10] = {0};

void  UART_voidInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
	//Enable Tx
	SET_BIT(UART1->CR1,3);
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <UART_voidInit+0x44>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <UART_voidInit+0x44>)
 8000bea:	f043 0308 	orr.w	r3, r3, #8
 8000bee:	60d3      	str	r3, [r2, #12]
	//Enable Rx
	SET_BIT(UART1->CR1,2);
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <UART_voidInit+0x44>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <UART_voidInit+0x44>)
 8000bf6:	f043 0304 	orr.w	r3, r3, #4
 8000bfa:	60d3      	str	r3, [r2, #12]
	// select Word length (8-bit)
	CLEAR_BIT(UART1->CR1,12);
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <UART_voidInit+0x44>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <UART_voidInit+0x44>)
 8000c02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c06:	60d3      	str	r3, [r2, #12]
	//	UART1->BRR=0x683 ;



	//select Buad Rate (115200)->BRR - CLK ->16MHz
	UART1->BRR=0x8B ;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <UART_voidInit+0x44>)
 8000c0a:	228b      	movs	r2, #139	; 0x8b
 8000c0c:	609a      	str	r2, [r3, #8]

	//Enable UART
	SET_BIT(UART1->CR1,13);
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <UART_voidInit+0x44>)
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <UART_voidInit+0x44>)
 8000c14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c18:	60d3      	str	r3, [r2, #12]



}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	40011000 	.word	0x40011000

08000c28 <UART_voidTransmit>:

void  UART_voidTransmit(u8 *Copyu8_Frame,u8 Copyu8_BlockSize)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	70fb      	strb	r3, [r7, #3]

	for(u8 i=0;i<Copyu8_BlockSize;i++)
 8000c34:	2300      	movs	r3, #0
 8000c36:	73fb      	strb	r3, [r7, #15]
 8000c38:	e010      	b.n	8000c5c <UART_voidTransmit+0x34>
	{
		while(!GET_BIT(UART1->SR,6));
 8000c3a:	bf00      	nop
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <UART_voidTransmit+0x4c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	099b      	lsrs	r3, r3, #6
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d0f8      	beq.n	8000c3c <UART_voidTransmit+0x14>
		UART1->DR=Copyu8_Frame[i];
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	4413      	add	r3, r2
 8000c50:	781a      	ldrb	r2, [r3, #0]
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <UART_voidTransmit+0x4c>)
 8000c54:	605a      	str	r2, [r3, #4]
	for(u8 i=0;i<Copyu8_BlockSize;i++)
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	7bfa      	ldrb	r2, [r7, #15]
 8000c5e:	78fb      	ldrb	r3, [r7, #3]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d3ea      	bcc.n	8000c3a <UART_voidTransmit+0x12>
	}
}
 8000c64:	bf00      	nop
 8000c66:	bf00      	nop
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40011000 	.word	0x40011000

08000c78 <UART_voidReciveAsyn>:
	}
	return Loc_u8ReceiveData;
}

void UART_voidReciveAsyn( u8 *Copy_pu8Reading   , u8 Copy_SizeIndex ,  void(*Copy_PvNotificationFunction)(void))
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	460b      	mov	r3, r1
 8000c82:	607a      	str	r2, [r7, #4]
 8000c84:	72fb      	strb	r3, [r7, #11]
	if (Copy_pu8Reading != NULL || Copy_PvNotificationFunction != NULL)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d102      	bne.n	8000c92 <UART_voidReciveAsyn+0x1a>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d011      	beq.n	8000cb6 <UART_voidReciveAsyn+0x3e>
	{

		UART1_pu16AsynchReading = Copy_pu8Reading;
 8000c92:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <UART_voidReciveAsyn+0x48>)
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	6013      	str	r3, [r2, #0]
		UART_u8ArraySize = Copy_SizeIndex;
 8000c98:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <UART_voidReciveAsyn+0x4c>)
 8000c9a:	7afb      	ldrb	r3, [r7, #11]
 8000c9c:	7013      	strb	r3, [r2, #0]
		UART1_CallBack= Copy_PvNotificationFunction ;
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <UART_voidReciveAsyn+0x50>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6013      	str	r3, [r2, #0]

		/*Enable NVIC*/
		COR_NVIC_vEnableInterrupt(USART1_IRQn);
 8000ca4:	2025      	movs	r0, #37	; 0x25
 8000ca6:	f7ff faf3 	bl	8000290 <COR_NVIC_vEnableInterrupt>

		/*Enable Interrupt*/
		SET_BIT(UART1->CR1,5);
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <UART_voidReciveAsyn+0x54>)
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <UART_voidReciveAsyn+0x54>)
 8000cb0:	f043 0320 	orr.w	r3, r3, #32
 8000cb4:	60d3      	str	r3, [r2, #12]
	}
}
 8000cb6:	bf00      	nop
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	2000010c 	.word	0x2000010c
 8000cc4:	20000110 	.word	0x20000110
 8000cc8:	20000114 	.word	0x20000114
 8000ccc:	40011000 	.word	0x40011000

08000cd0 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0

	UART1_pu16AsynchReading[UART_u8Index] = (UART1->DR);
 8000cd4:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <USART1_IRQHandler+0x4c>)
 8000cd6:	6859      	ldr	r1, [r3, #4]
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <USART1_IRQHandler+0x50>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a11      	ldr	r2, [pc, #68]	; (8000d24 <USART1_IRQHandler+0x54>)
 8000cde:	7812      	ldrb	r2, [r2, #0]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	b2ca      	uxtb	r2, r1
 8000ce4:	701a      	strb	r2, [r3, #0]

	UART_u8Index++;
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <USART1_IRQHandler+0x54>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	3301      	adds	r3, #1
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <USART1_IRQHandler+0x54>)
 8000cf0:	701a      	strb	r2, [r3, #0]

	if (UART_u8Index == UART_u8ArraySize)
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <USART1_IRQHandler+0x54>)
 8000cf4:	781a      	ldrb	r2, [r3, #0]
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <USART1_IRQHandler+0x58>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d105      	bne.n	8000d0a <USART1_IRQHandler+0x3a>
	{
		UART_u8Index = 0 ;
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <USART1_IRQHandler+0x54>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
		UART1_CallBack();
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <USART1_IRQHandler+0x5c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4798      	blx	r3
	}

	/*Clear flag RXEN*/
	CLEAR_BIT(UART1->SR,5);
 8000d0a:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <USART1_IRQHandler+0x4c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a03      	ldr	r2, [pc, #12]	; (8000d1c <USART1_IRQHandler+0x4c>)
 8000d10:	f023 0320 	bic.w	r3, r3, #32
 8000d14:	6013      	str	r3, [r2, #0]
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40011000 	.word	0x40011000
 8000d20:	2000010c 	.word	0x2000010c
 8000d24:	20000111 	.word	0x20000111
 8000d28:	20000110 	.word	0x20000110
 8000d2c:	20000114 	.word	0x20000114

08000d30 <main>:
#include "UART_Interface.h"
#include "ESP_interface.h"


int main()
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
	u8 data;

	MCL_RCC_vInitSysClk(&RCC_G_Config); // Initialize the system clock
 8000d36:	4825      	ldr	r0, [pc, #148]	; (8000dcc <main+0x9c>)
 8000d38:	f7ff fe86 	bl	8000a48 <MCL_RCC_vInitSysClk>

	MCL_RCC_vEnablePeriphClk(AHB1_BUS, 0 );	 //Enable POERTA
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f7ff fed4 	bl	8000aec <MCL_RCC_vEnablePeriphClk>

	MCL_RCC_vEnablePeriphClk(APB2_BUS, 4 );  //Enable UART
 8000d44:	2104      	movs	r1, #4
 8000d46:	2001      	movs	r0, #1
 8000d48:	f7ff fed0 	bl	8000aec <MCL_RCC_vEnablePeriphClk>

	MCL_STK_vInit(&STK_G_Config); // Initialize the SysTick timer
 8000d4c:	4820      	ldr	r0, [pc, #128]	; (8000dd0 <main+0xa0>)
 8000d4e:	f7ff ff19 	bl	8000b84 <MCL_STK_vInit>


	GPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN9, GPIO_MODE_AF_PP);
 8000d52:	2202      	movs	r2, #2
 8000d54:	2109      	movs	r1, #9
 8000d56:	2000      	movs	r0, #0
 8000d58:	f7ff fd42 	bl	80007e0 <GPIO_voidSetPinMode>
	GPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN10, GPIO_MODE_AF_PP);
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	210a      	movs	r1, #10
 8000d60:	2000      	movs	r0, #0
 8000d62:	f7ff fd3d 	bl	80007e0 <GPIO_voidSetPinMode>
	GPIO_voidSetPinALTF(GPIO_PORTA, GPIO_PIN9, GPIO_AF7_USART1_USART2_SPI1);
 8000d66:	2207      	movs	r2, #7
 8000d68:	2109      	movs	r1, #9
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f7ff fd7c 	bl	8000868 <GPIO_voidSetPinALTF>
	GPIO_voidSetPinALTF(GPIO_PORTA, GPIO_PIN10,GPIO_AF7_USART1_USART2_SPI1);
 8000d70:	2207      	movs	r2, #7
 8000d72:	210a      	movs	r1, #10
 8000d74:	2000      	movs	r0, #0
 8000d76:	f7ff fd77 	bl	8000868 <GPIO_voidSetPinALTF>

	UART_voidInit();
 8000d7a:	f7ff ff31 	bl	8000be0 <UART_voidInit>

	GPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN1, GPIO_MODE_OUT_PP);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2101      	movs	r1, #1
 8000d82:	2000      	movs	r0, #0
 8000d84:	f7ff fd2c 	bl	80007e0 <GPIO_voidSetPinMode>

	ESP_voidInit();
 8000d88:	f7ff faa8 	bl	80002dc <ESP_voidInit>

	ESP_voidConnctEspRouter("Adel_Hani","86348634adelHANI##@@**");
 8000d8c:	4911      	ldr	r1, [pc, #68]	; (8000dd4 <main+0xa4>)
 8000d8e:	4812      	ldr	r0, [pc, #72]	; (8000dd8 <main+0xa8>)
 8000d90:	f7ff facc 	bl	800032c <ESP_voidConnctEspRouter>

	ESP_voidConnectEspServer("TCP","23.179.32.37","80");
 8000d94:	4a11      	ldr	r2, [pc, #68]	; (8000ddc <main+0xac>)
 8000d96:	4912      	ldr	r1, [pc, #72]	; (8000de0 <main+0xb0>)
 8000d98:	4812      	ldr	r0, [pc, #72]	; (8000de4 <main+0xb4>)
 8000d9a:	f7ff fb31 	bl	8000400 <ESP_voidConnectEspServer>

	ESP_u8ExecuteHttpRequest("GET http://adelhaniarm.freevar.com/status.txt" , &data );
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	4619      	mov	r1, r3
 8000da2:	4811      	ldr	r0, [pc, #68]	; (8000de8 <main+0xb8>)
 8000da4:	f7ff fba4 	bl	80004f0 <ESP_u8ExecuteHttpRequest>


	if (data == '1')
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	2b31      	cmp	r3, #49	; 0x31
 8000dac:	d105      	bne.n	8000dba <main+0x8a>
	{
		GPIO_voidSetPinVal(GPIO_PORTA, GPIO_PIN1, PIN_SET);
 8000dae:	2201      	movs	r2, #1
 8000db0:	2101      	movs	r1, #1
 8000db2:	2000      	movs	r0, #0
 8000db4:	f7ff fdd2 	bl	800095c <GPIO_voidSetPinVal>
 8000db8:	e007      	b.n	8000dca <main+0x9a>
	}
	else if (data == '0')
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	2b30      	cmp	r3, #48	; 0x30
 8000dbe:	d104      	bne.n	8000dca <main+0x9a>
	{
		GPIO_voidSetPinVal(GPIO_PORTA, GPIO_PIN1, PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f7ff fdc9 	bl	800095c <GPIO_voidSetPinVal>
	}

	while(1)
 8000dca:	e7fe      	b.n	8000dca <main+0x9a>
 8000dcc:	2000000c 	.word	0x2000000c
 8000dd0:	20000100 	.word	0x20000100
 8000dd4:	080017e8 	.word	0x080017e8
 8000dd8:	08001800 	.word	0x08001800
 8000ddc:	0800180c 	.word	0x0800180c
 8000de0:	08001810 	.word	0x08001810
 8000de4:	08001820 	.word	0x08001820
 8000de8:	08001824 	.word	0x08001824

08000dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df4:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <_sbrk+0x5c>)
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <_sbrk+0x60>)
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <_sbrk+0x64>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <_sbrk+0x68>)
 8000e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d207      	bcs.n	8000e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e1c:	f000 f846 	bl	8000eac <__errno>
 8000e20:	4603      	mov	r3, r0
 8000e22:	220c      	movs	r2, #12
 8000e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	e009      	b.n	8000e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <_sbrk+0x64>)
 8000e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20010000 	.word	0x20010000
 8000e4c:	00000400 	.word	0x00000400
 8000e50:	20000118 	.word	0x20000118
 8000e54:	20000138 	.word	0x20000138

08000e58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e58:	480d      	ldr	r0, [pc, #52]	; (8000e90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e5a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e5c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e60:	480c      	ldr	r0, [pc, #48]	; (8000e94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e62:	490d      	ldr	r1, [pc, #52]	; (8000e98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e64:	4a0d      	ldr	r2, [pc, #52]	; (8000e9c <LoopForever+0xe>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e68:	e002      	b.n	8000e70 <LoopCopyDataInit>

08000e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6e:	3304      	adds	r3, #4

08000e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e74:	d3f9      	bcc.n	8000e6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e76:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e78:	4c0a      	ldr	r4, [pc, #40]	; (8000ea4 <LoopForever+0x16>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e7c:	e001      	b.n	8000e82 <LoopFillZerobss>

08000e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e80:	3204      	adds	r2, #4

08000e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e84:	d3fb      	bcc.n	8000e7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e86:	f000 f817 	bl	8000eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e8a:	f7ff ff51 	bl	8000d30 <main>

08000e8e <LoopForever>:

LoopForever:
  b LoopForever
 8000e8e:	e7fe      	b.n	8000e8e <LoopForever>
  ldr   r0, =_estack
 8000e90:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e98:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e9c:	08001890 	.word	0x08001890
  ldr r2, =_sbss
 8000ea0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000ea4:	20000134 	.word	0x20000134

08000ea8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <ADC_IRQHandler>
	...

08000eac <__errno>:
 8000eac:	4b01      	ldr	r3, [pc, #4]	; (8000eb4 <__errno+0x8>)
 8000eae:	6818      	ldr	r0, [r3, #0]
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000018 	.word	0x20000018

08000eb8 <__libc_init_array>:
 8000eb8:	b570      	push	{r4, r5, r6, lr}
 8000eba:	4d0d      	ldr	r5, [pc, #52]	; (8000ef0 <__libc_init_array+0x38>)
 8000ebc:	4c0d      	ldr	r4, [pc, #52]	; (8000ef4 <__libc_init_array+0x3c>)
 8000ebe:	1b64      	subs	r4, r4, r5
 8000ec0:	10a4      	asrs	r4, r4, #2
 8000ec2:	2600      	movs	r6, #0
 8000ec4:	42a6      	cmp	r6, r4
 8000ec6:	d109      	bne.n	8000edc <__libc_init_array+0x24>
 8000ec8:	4d0b      	ldr	r5, [pc, #44]	; (8000ef8 <__libc_init_array+0x40>)
 8000eca:	4c0c      	ldr	r4, [pc, #48]	; (8000efc <__libc_init_array+0x44>)
 8000ecc:	f000 fc5c 	bl	8001788 <_init>
 8000ed0:	1b64      	subs	r4, r4, r5
 8000ed2:	10a4      	asrs	r4, r4, #2
 8000ed4:	2600      	movs	r6, #0
 8000ed6:	42a6      	cmp	r6, r4
 8000ed8:	d105      	bne.n	8000ee6 <__libc_init_array+0x2e>
 8000eda:	bd70      	pop	{r4, r5, r6, pc}
 8000edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ee0:	4798      	blx	r3
 8000ee2:	3601      	adds	r6, #1
 8000ee4:	e7ee      	b.n	8000ec4 <__libc_init_array+0xc>
 8000ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000eea:	4798      	blx	r3
 8000eec:	3601      	adds	r6, #1
 8000eee:	e7f2      	b.n	8000ed6 <__libc_init_array+0x1e>
 8000ef0:	08001888 	.word	0x08001888
 8000ef4:	08001888 	.word	0x08001888
 8000ef8:	08001888 	.word	0x08001888
 8000efc:	0800188c 	.word	0x0800188c

08000f00 <memset>:
 8000f00:	4402      	add	r2, r0
 8000f02:	4603      	mov	r3, r0
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d100      	bne.n	8000f0a <memset+0xa>
 8000f08:	4770      	bx	lr
 8000f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8000f0e:	e7f9      	b.n	8000f04 <memset+0x4>

08000f10 <siprintf>:
 8000f10:	b40e      	push	{r1, r2, r3}
 8000f12:	b500      	push	{lr}
 8000f14:	b09c      	sub	sp, #112	; 0x70
 8000f16:	ab1d      	add	r3, sp, #116	; 0x74
 8000f18:	9002      	str	r0, [sp, #8]
 8000f1a:	9006      	str	r0, [sp, #24]
 8000f1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000f20:	4809      	ldr	r0, [pc, #36]	; (8000f48 <siprintf+0x38>)
 8000f22:	9107      	str	r1, [sp, #28]
 8000f24:	9104      	str	r1, [sp, #16]
 8000f26:	4909      	ldr	r1, [pc, #36]	; (8000f4c <siprintf+0x3c>)
 8000f28:	f853 2b04 	ldr.w	r2, [r3], #4
 8000f2c:	9105      	str	r1, [sp, #20]
 8000f2e:	6800      	ldr	r0, [r0, #0]
 8000f30:	9301      	str	r3, [sp, #4]
 8000f32:	a902      	add	r1, sp, #8
 8000f34:	f000 f876 	bl	8001024 <_svfiprintf_r>
 8000f38:	9b02      	ldr	r3, [sp, #8]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
 8000f3e:	b01c      	add	sp, #112	; 0x70
 8000f40:	f85d eb04 	ldr.w	lr, [sp], #4
 8000f44:	b003      	add	sp, #12
 8000f46:	4770      	bx	lr
 8000f48:	20000018 	.word	0x20000018
 8000f4c:	ffff0208 	.word	0xffff0208

08000f50 <strcat>:
 8000f50:	b510      	push	{r4, lr}
 8000f52:	4602      	mov	r2, r0
 8000f54:	7814      	ldrb	r4, [r2, #0]
 8000f56:	4613      	mov	r3, r2
 8000f58:	3201      	adds	r2, #1
 8000f5a:	2c00      	cmp	r4, #0
 8000f5c:	d1fa      	bne.n	8000f54 <strcat+0x4>
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000f64:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000f68:	2a00      	cmp	r2, #0
 8000f6a:	d1f9      	bne.n	8000f60 <strcat+0x10>
 8000f6c:	bd10      	pop	{r4, pc}

08000f6e <__ssputs_r>:
 8000f6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f72:	688e      	ldr	r6, [r1, #8]
 8000f74:	429e      	cmp	r6, r3
 8000f76:	4682      	mov	sl, r0
 8000f78:	460c      	mov	r4, r1
 8000f7a:	4690      	mov	r8, r2
 8000f7c:	461f      	mov	r7, r3
 8000f7e:	d838      	bhi.n	8000ff2 <__ssputs_r+0x84>
 8000f80:	898a      	ldrh	r2, [r1, #12]
 8000f82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000f86:	d032      	beq.n	8000fee <__ssputs_r+0x80>
 8000f88:	6825      	ldr	r5, [r4, #0]
 8000f8a:	6909      	ldr	r1, [r1, #16]
 8000f8c:	eba5 0901 	sub.w	r9, r5, r1
 8000f90:	6965      	ldr	r5, [r4, #20]
 8000f92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000f96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	444b      	add	r3, r9
 8000f9e:	106d      	asrs	r5, r5, #1
 8000fa0:	429d      	cmp	r5, r3
 8000fa2:	bf38      	it	cc
 8000fa4:	461d      	movcc	r5, r3
 8000fa6:	0553      	lsls	r3, r2, #21
 8000fa8:	d531      	bpl.n	800100e <__ssputs_r+0xa0>
 8000faa:	4629      	mov	r1, r5
 8000fac:	f000 fb46 	bl	800163c <_malloc_r>
 8000fb0:	4606      	mov	r6, r0
 8000fb2:	b950      	cbnz	r0, 8000fca <__ssputs_r+0x5c>
 8000fb4:	230c      	movs	r3, #12
 8000fb6:	f8ca 3000 	str.w	r3, [sl]
 8000fba:	89a3      	ldrh	r3, [r4, #12]
 8000fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fc0:	81a3      	strh	r3, [r4, #12]
 8000fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fca:	6921      	ldr	r1, [r4, #16]
 8000fcc:	464a      	mov	r2, r9
 8000fce:	f000 fabd 	bl	800154c <memcpy>
 8000fd2:	89a3      	ldrh	r3, [r4, #12]
 8000fd4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fdc:	81a3      	strh	r3, [r4, #12]
 8000fde:	6126      	str	r6, [r4, #16]
 8000fe0:	6165      	str	r5, [r4, #20]
 8000fe2:	444e      	add	r6, r9
 8000fe4:	eba5 0509 	sub.w	r5, r5, r9
 8000fe8:	6026      	str	r6, [r4, #0]
 8000fea:	60a5      	str	r5, [r4, #8]
 8000fec:	463e      	mov	r6, r7
 8000fee:	42be      	cmp	r6, r7
 8000ff0:	d900      	bls.n	8000ff4 <__ssputs_r+0x86>
 8000ff2:	463e      	mov	r6, r7
 8000ff4:	4632      	mov	r2, r6
 8000ff6:	6820      	ldr	r0, [r4, #0]
 8000ff8:	4641      	mov	r1, r8
 8000ffa:	f000 fab5 	bl	8001568 <memmove>
 8000ffe:	68a3      	ldr	r3, [r4, #8]
 8001000:	6822      	ldr	r2, [r4, #0]
 8001002:	1b9b      	subs	r3, r3, r6
 8001004:	4432      	add	r2, r6
 8001006:	60a3      	str	r3, [r4, #8]
 8001008:	6022      	str	r2, [r4, #0]
 800100a:	2000      	movs	r0, #0
 800100c:	e7db      	b.n	8000fc6 <__ssputs_r+0x58>
 800100e:	462a      	mov	r2, r5
 8001010:	f000 fb6e 	bl	80016f0 <_realloc_r>
 8001014:	4606      	mov	r6, r0
 8001016:	2800      	cmp	r0, #0
 8001018:	d1e1      	bne.n	8000fde <__ssputs_r+0x70>
 800101a:	6921      	ldr	r1, [r4, #16]
 800101c:	4650      	mov	r0, sl
 800101e:	f000 fabd 	bl	800159c <_free_r>
 8001022:	e7c7      	b.n	8000fb4 <__ssputs_r+0x46>

08001024 <_svfiprintf_r>:
 8001024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001028:	4698      	mov	r8, r3
 800102a:	898b      	ldrh	r3, [r1, #12]
 800102c:	061b      	lsls	r3, r3, #24
 800102e:	b09d      	sub	sp, #116	; 0x74
 8001030:	4607      	mov	r7, r0
 8001032:	460d      	mov	r5, r1
 8001034:	4614      	mov	r4, r2
 8001036:	d50e      	bpl.n	8001056 <_svfiprintf_r+0x32>
 8001038:	690b      	ldr	r3, [r1, #16]
 800103a:	b963      	cbnz	r3, 8001056 <_svfiprintf_r+0x32>
 800103c:	2140      	movs	r1, #64	; 0x40
 800103e:	f000 fafd 	bl	800163c <_malloc_r>
 8001042:	6028      	str	r0, [r5, #0]
 8001044:	6128      	str	r0, [r5, #16]
 8001046:	b920      	cbnz	r0, 8001052 <_svfiprintf_r+0x2e>
 8001048:	230c      	movs	r3, #12
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	e0d1      	b.n	80011f6 <_svfiprintf_r+0x1d2>
 8001052:	2340      	movs	r3, #64	; 0x40
 8001054:	616b      	str	r3, [r5, #20]
 8001056:	2300      	movs	r3, #0
 8001058:	9309      	str	r3, [sp, #36]	; 0x24
 800105a:	2320      	movs	r3, #32
 800105c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001060:	f8cd 800c 	str.w	r8, [sp, #12]
 8001064:	2330      	movs	r3, #48	; 0x30
 8001066:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001210 <_svfiprintf_r+0x1ec>
 800106a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800106e:	f04f 0901 	mov.w	r9, #1
 8001072:	4623      	mov	r3, r4
 8001074:	469a      	mov	sl, r3
 8001076:	f813 2b01 	ldrb.w	r2, [r3], #1
 800107a:	b10a      	cbz	r2, 8001080 <_svfiprintf_r+0x5c>
 800107c:	2a25      	cmp	r2, #37	; 0x25
 800107e:	d1f9      	bne.n	8001074 <_svfiprintf_r+0x50>
 8001080:	ebba 0b04 	subs.w	fp, sl, r4
 8001084:	d00b      	beq.n	800109e <_svfiprintf_r+0x7a>
 8001086:	465b      	mov	r3, fp
 8001088:	4622      	mov	r2, r4
 800108a:	4629      	mov	r1, r5
 800108c:	4638      	mov	r0, r7
 800108e:	f7ff ff6e 	bl	8000f6e <__ssputs_r>
 8001092:	3001      	adds	r0, #1
 8001094:	f000 80aa 	beq.w	80011ec <_svfiprintf_r+0x1c8>
 8001098:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800109a:	445a      	add	r2, fp
 800109c:	9209      	str	r2, [sp, #36]	; 0x24
 800109e:	f89a 3000 	ldrb.w	r3, [sl]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 80a2 	beq.w	80011ec <_svfiprintf_r+0x1c8>
 80010a8:	2300      	movs	r3, #0
 80010aa:	f04f 32ff 	mov.w	r2, #4294967295
 80010ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80010b2:	f10a 0a01 	add.w	sl, sl, #1
 80010b6:	9304      	str	r3, [sp, #16]
 80010b8:	9307      	str	r3, [sp, #28]
 80010ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80010be:	931a      	str	r3, [sp, #104]	; 0x68
 80010c0:	4654      	mov	r4, sl
 80010c2:	2205      	movs	r2, #5
 80010c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010c8:	4851      	ldr	r0, [pc, #324]	; (8001210 <_svfiprintf_r+0x1ec>)
 80010ca:	f7ff f891 	bl	80001f0 <memchr>
 80010ce:	9a04      	ldr	r2, [sp, #16]
 80010d0:	b9d8      	cbnz	r0, 800110a <_svfiprintf_r+0xe6>
 80010d2:	06d0      	lsls	r0, r2, #27
 80010d4:	bf44      	itt	mi
 80010d6:	2320      	movmi	r3, #32
 80010d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80010dc:	0711      	lsls	r1, r2, #28
 80010de:	bf44      	itt	mi
 80010e0:	232b      	movmi	r3, #43	; 0x2b
 80010e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80010e6:	f89a 3000 	ldrb.w	r3, [sl]
 80010ea:	2b2a      	cmp	r3, #42	; 0x2a
 80010ec:	d015      	beq.n	800111a <_svfiprintf_r+0xf6>
 80010ee:	9a07      	ldr	r2, [sp, #28]
 80010f0:	4654      	mov	r4, sl
 80010f2:	2000      	movs	r0, #0
 80010f4:	f04f 0c0a 	mov.w	ip, #10
 80010f8:	4621      	mov	r1, r4
 80010fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80010fe:	3b30      	subs	r3, #48	; 0x30
 8001100:	2b09      	cmp	r3, #9
 8001102:	d94e      	bls.n	80011a2 <_svfiprintf_r+0x17e>
 8001104:	b1b0      	cbz	r0, 8001134 <_svfiprintf_r+0x110>
 8001106:	9207      	str	r2, [sp, #28]
 8001108:	e014      	b.n	8001134 <_svfiprintf_r+0x110>
 800110a:	eba0 0308 	sub.w	r3, r0, r8
 800110e:	fa09 f303 	lsl.w	r3, r9, r3
 8001112:	4313      	orrs	r3, r2
 8001114:	9304      	str	r3, [sp, #16]
 8001116:	46a2      	mov	sl, r4
 8001118:	e7d2      	b.n	80010c0 <_svfiprintf_r+0x9c>
 800111a:	9b03      	ldr	r3, [sp, #12]
 800111c:	1d19      	adds	r1, r3, #4
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	9103      	str	r1, [sp, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	bfbb      	ittet	lt
 8001126:	425b      	neglt	r3, r3
 8001128:	f042 0202 	orrlt.w	r2, r2, #2
 800112c:	9307      	strge	r3, [sp, #28]
 800112e:	9307      	strlt	r3, [sp, #28]
 8001130:	bfb8      	it	lt
 8001132:	9204      	strlt	r2, [sp, #16]
 8001134:	7823      	ldrb	r3, [r4, #0]
 8001136:	2b2e      	cmp	r3, #46	; 0x2e
 8001138:	d10c      	bne.n	8001154 <_svfiprintf_r+0x130>
 800113a:	7863      	ldrb	r3, [r4, #1]
 800113c:	2b2a      	cmp	r3, #42	; 0x2a
 800113e:	d135      	bne.n	80011ac <_svfiprintf_r+0x188>
 8001140:	9b03      	ldr	r3, [sp, #12]
 8001142:	1d1a      	adds	r2, r3, #4
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	9203      	str	r2, [sp, #12]
 8001148:	2b00      	cmp	r3, #0
 800114a:	bfb8      	it	lt
 800114c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001150:	3402      	adds	r4, #2
 8001152:	9305      	str	r3, [sp, #20]
 8001154:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001220 <_svfiprintf_r+0x1fc>
 8001158:	7821      	ldrb	r1, [r4, #0]
 800115a:	2203      	movs	r2, #3
 800115c:	4650      	mov	r0, sl
 800115e:	f7ff f847 	bl	80001f0 <memchr>
 8001162:	b140      	cbz	r0, 8001176 <_svfiprintf_r+0x152>
 8001164:	2340      	movs	r3, #64	; 0x40
 8001166:	eba0 000a 	sub.w	r0, r0, sl
 800116a:	fa03 f000 	lsl.w	r0, r3, r0
 800116e:	9b04      	ldr	r3, [sp, #16]
 8001170:	4303      	orrs	r3, r0
 8001172:	3401      	adds	r4, #1
 8001174:	9304      	str	r3, [sp, #16]
 8001176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800117a:	4826      	ldr	r0, [pc, #152]	; (8001214 <_svfiprintf_r+0x1f0>)
 800117c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001180:	2206      	movs	r2, #6
 8001182:	f7ff f835 	bl	80001f0 <memchr>
 8001186:	2800      	cmp	r0, #0
 8001188:	d038      	beq.n	80011fc <_svfiprintf_r+0x1d8>
 800118a:	4b23      	ldr	r3, [pc, #140]	; (8001218 <_svfiprintf_r+0x1f4>)
 800118c:	bb1b      	cbnz	r3, 80011d6 <_svfiprintf_r+0x1b2>
 800118e:	9b03      	ldr	r3, [sp, #12]
 8001190:	3307      	adds	r3, #7
 8001192:	f023 0307 	bic.w	r3, r3, #7
 8001196:	3308      	adds	r3, #8
 8001198:	9303      	str	r3, [sp, #12]
 800119a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800119c:	4433      	add	r3, r6
 800119e:	9309      	str	r3, [sp, #36]	; 0x24
 80011a0:	e767      	b.n	8001072 <_svfiprintf_r+0x4e>
 80011a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80011a6:	460c      	mov	r4, r1
 80011a8:	2001      	movs	r0, #1
 80011aa:	e7a5      	b.n	80010f8 <_svfiprintf_r+0xd4>
 80011ac:	2300      	movs	r3, #0
 80011ae:	3401      	adds	r4, #1
 80011b0:	9305      	str	r3, [sp, #20]
 80011b2:	4619      	mov	r1, r3
 80011b4:	f04f 0c0a 	mov.w	ip, #10
 80011b8:	4620      	mov	r0, r4
 80011ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80011be:	3a30      	subs	r2, #48	; 0x30
 80011c0:	2a09      	cmp	r2, #9
 80011c2:	d903      	bls.n	80011cc <_svfiprintf_r+0x1a8>
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0c5      	beq.n	8001154 <_svfiprintf_r+0x130>
 80011c8:	9105      	str	r1, [sp, #20]
 80011ca:	e7c3      	b.n	8001154 <_svfiprintf_r+0x130>
 80011cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80011d0:	4604      	mov	r4, r0
 80011d2:	2301      	movs	r3, #1
 80011d4:	e7f0      	b.n	80011b8 <_svfiprintf_r+0x194>
 80011d6:	ab03      	add	r3, sp, #12
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	462a      	mov	r2, r5
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <_svfiprintf_r+0x1f8>)
 80011de:	a904      	add	r1, sp, #16
 80011e0:	4638      	mov	r0, r7
 80011e2:	f3af 8000 	nop.w
 80011e6:	1c42      	adds	r2, r0, #1
 80011e8:	4606      	mov	r6, r0
 80011ea:	d1d6      	bne.n	800119a <_svfiprintf_r+0x176>
 80011ec:	89ab      	ldrh	r3, [r5, #12]
 80011ee:	065b      	lsls	r3, r3, #25
 80011f0:	f53f af2c 	bmi.w	800104c <_svfiprintf_r+0x28>
 80011f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80011f6:	b01d      	add	sp, #116	; 0x74
 80011f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011fc:	ab03      	add	r3, sp, #12
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	462a      	mov	r2, r5
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <_svfiprintf_r+0x1f8>)
 8001204:	a904      	add	r1, sp, #16
 8001206:	4638      	mov	r0, r7
 8001208:	f000 f87a 	bl	8001300 <_printf_i>
 800120c:	e7eb      	b.n	80011e6 <_svfiprintf_r+0x1c2>
 800120e:	bf00      	nop
 8001210:	08001852 	.word	0x08001852
 8001214:	0800185c 	.word	0x0800185c
 8001218:	00000000 	.word	0x00000000
 800121c:	08000f6f 	.word	0x08000f6f
 8001220:	08001858 	.word	0x08001858

08001224 <_printf_common>:
 8001224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001228:	4616      	mov	r6, r2
 800122a:	4699      	mov	r9, r3
 800122c:	688a      	ldr	r2, [r1, #8]
 800122e:	690b      	ldr	r3, [r1, #16]
 8001230:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001234:	4293      	cmp	r3, r2
 8001236:	bfb8      	it	lt
 8001238:	4613      	movlt	r3, r2
 800123a:	6033      	str	r3, [r6, #0]
 800123c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001240:	4607      	mov	r7, r0
 8001242:	460c      	mov	r4, r1
 8001244:	b10a      	cbz	r2, 800124a <_printf_common+0x26>
 8001246:	3301      	adds	r3, #1
 8001248:	6033      	str	r3, [r6, #0]
 800124a:	6823      	ldr	r3, [r4, #0]
 800124c:	0699      	lsls	r1, r3, #26
 800124e:	bf42      	ittt	mi
 8001250:	6833      	ldrmi	r3, [r6, #0]
 8001252:	3302      	addmi	r3, #2
 8001254:	6033      	strmi	r3, [r6, #0]
 8001256:	6825      	ldr	r5, [r4, #0]
 8001258:	f015 0506 	ands.w	r5, r5, #6
 800125c:	d106      	bne.n	800126c <_printf_common+0x48>
 800125e:	f104 0a19 	add.w	sl, r4, #25
 8001262:	68e3      	ldr	r3, [r4, #12]
 8001264:	6832      	ldr	r2, [r6, #0]
 8001266:	1a9b      	subs	r3, r3, r2
 8001268:	42ab      	cmp	r3, r5
 800126a:	dc26      	bgt.n	80012ba <_printf_common+0x96>
 800126c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001270:	1e13      	subs	r3, r2, #0
 8001272:	6822      	ldr	r2, [r4, #0]
 8001274:	bf18      	it	ne
 8001276:	2301      	movne	r3, #1
 8001278:	0692      	lsls	r2, r2, #26
 800127a:	d42b      	bmi.n	80012d4 <_printf_common+0xb0>
 800127c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001280:	4649      	mov	r1, r9
 8001282:	4638      	mov	r0, r7
 8001284:	47c0      	blx	r8
 8001286:	3001      	adds	r0, #1
 8001288:	d01e      	beq.n	80012c8 <_printf_common+0xa4>
 800128a:	6823      	ldr	r3, [r4, #0]
 800128c:	68e5      	ldr	r5, [r4, #12]
 800128e:	6832      	ldr	r2, [r6, #0]
 8001290:	f003 0306 	and.w	r3, r3, #6
 8001294:	2b04      	cmp	r3, #4
 8001296:	bf08      	it	eq
 8001298:	1aad      	subeq	r5, r5, r2
 800129a:	68a3      	ldr	r3, [r4, #8]
 800129c:	6922      	ldr	r2, [r4, #16]
 800129e:	bf0c      	ite	eq
 80012a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80012a4:	2500      	movne	r5, #0
 80012a6:	4293      	cmp	r3, r2
 80012a8:	bfc4      	itt	gt
 80012aa:	1a9b      	subgt	r3, r3, r2
 80012ac:	18ed      	addgt	r5, r5, r3
 80012ae:	2600      	movs	r6, #0
 80012b0:	341a      	adds	r4, #26
 80012b2:	42b5      	cmp	r5, r6
 80012b4:	d11a      	bne.n	80012ec <_printf_common+0xc8>
 80012b6:	2000      	movs	r0, #0
 80012b8:	e008      	b.n	80012cc <_printf_common+0xa8>
 80012ba:	2301      	movs	r3, #1
 80012bc:	4652      	mov	r2, sl
 80012be:	4649      	mov	r1, r9
 80012c0:	4638      	mov	r0, r7
 80012c2:	47c0      	blx	r8
 80012c4:	3001      	adds	r0, #1
 80012c6:	d103      	bne.n	80012d0 <_printf_common+0xac>
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012d0:	3501      	adds	r5, #1
 80012d2:	e7c6      	b.n	8001262 <_printf_common+0x3e>
 80012d4:	18e1      	adds	r1, r4, r3
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	2030      	movs	r0, #48	; 0x30
 80012da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80012de:	4422      	add	r2, r4
 80012e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80012e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80012e8:	3302      	adds	r3, #2
 80012ea:	e7c7      	b.n	800127c <_printf_common+0x58>
 80012ec:	2301      	movs	r3, #1
 80012ee:	4622      	mov	r2, r4
 80012f0:	4649      	mov	r1, r9
 80012f2:	4638      	mov	r0, r7
 80012f4:	47c0      	blx	r8
 80012f6:	3001      	adds	r0, #1
 80012f8:	d0e6      	beq.n	80012c8 <_printf_common+0xa4>
 80012fa:	3601      	adds	r6, #1
 80012fc:	e7d9      	b.n	80012b2 <_printf_common+0x8e>
	...

08001300 <_printf_i>:
 8001300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001304:	460c      	mov	r4, r1
 8001306:	4691      	mov	r9, r2
 8001308:	7e27      	ldrb	r7, [r4, #24]
 800130a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800130c:	2f78      	cmp	r7, #120	; 0x78
 800130e:	4680      	mov	r8, r0
 8001310:	469a      	mov	sl, r3
 8001312:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001316:	d807      	bhi.n	8001328 <_printf_i+0x28>
 8001318:	2f62      	cmp	r7, #98	; 0x62
 800131a:	d80a      	bhi.n	8001332 <_printf_i+0x32>
 800131c:	2f00      	cmp	r7, #0
 800131e:	f000 80d8 	beq.w	80014d2 <_printf_i+0x1d2>
 8001322:	2f58      	cmp	r7, #88	; 0x58
 8001324:	f000 80a3 	beq.w	800146e <_printf_i+0x16e>
 8001328:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800132c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001330:	e03a      	b.n	80013a8 <_printf_i+0xa8>
 8001332:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001336:	2b15      	cmp	r3, #21
 8001338:	d8f6      	bhi.n	8001328 <_printf_i+0x28>
 800133a:	a001      	add	r0, pc, #4	; (adr r0, 8001340 <_printf_i+0x40>)
 800133c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001340:	08001399 	.word	0x08001399
 8001344:	080013ad 	.word	0x080013ad
 8001348:	08001329 	.word	0x08001329
 800134c:	08001329 	.word	0x08001329
 8001350:	08001329 	.word	0x08001329
 8001354:	08001329 	.word	0x08001329
 8001358:	080013ad 	.word	0x080013ad
 800135c:	08001329 	.word	0x08001329
 8001360:	08001329 	.word	0x08001329
 8001364:	08001329 	.word	0x08001329
 8001368:	08001329 	.word	0x08001329
 800136c:	080014b9 	.word	0x080014b9
 8001370:	080013dd 	.word	0x080013dd
 8001374:	0800149b 	.word	0x0800149b
 8001378:	08001329 	.word	0x08001329
 800137c:	08001329 	.word	0x08001329
 8001380:	080014db 	.word	0x080014db
 8001384:	08001329 	.word	0x08001329
 8001388:	080013dd 	.word	0x080013dd
 800138c:	08001329 	.word	0x08001329
 8001390:	08001329 	.word	0x08001329
 8001394:	080014a3 	.word	0x080014a3
 8001398:	680b      	ldr	r3, [r1, #0]
 800139a:	1d1a      	adds	r2, r3, #4
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	600a      	str	r2, [r1, #0]
 80013a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80013a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80013a8:	2301      	movs	r3, #1
 80013aa:	e0a3      	b.n	80014f4 <_printf_i+0x1f4>
 80013ac:	6825      	ldr	r5, [r4, #0]
 80013ae:	6808      	ldr	r0, [r1, #0]
 80013b0:	062e      	lsls	r6, r5, #24
 80013b2:	f100 0304 	add.w	r3, r0, #4
 80013b6:	d50a      	bpl.n	80013ce <_printf_i+0xce>
 80013b8:	6805      	ldr	r5, [r0, #0]
 80013ba:	600b      	str	r3, [r1, #0]
 80013bc:	2d00      	cmp	r5, #0
 80013be:	da03      	bge.n	80013c8 <_printf_i+0xc8>
 80013c0:	232d      	movs	r3, #45	; 0x2d
 80013c2:	426d      	negs	r5, r5
 80013c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80013c8:	485e      	ldr	r0, [pc, #376]	; (8001544 <_printf_i+0x244>)
 80013ca:	230a      	movs	r3, #10
 80013cc:	e019      	b.n	8001402 <_printf_i+0x102>
 80013ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80013d2:	6805      	ldr	r5, [r0, #0]
 80013d4:	600b      	str	r3, [r1, #0]
 80013d6:	bf18      	it	ne
 80013d8:	b22d      	sxthne	r5, r5
 80013da:	e7ef      	b.n	80013bc <_printf_i+0xbc>
 80013dc:	680b      	ldr	r3, [r1, #0]
 80013de:	6825      	ldr	r5, [r4, #0]
 80013e0:	1d18      	adds	r0, r3, #4
 80013e2:	6008      	str	r0, [r1, #0]
 80013e4:	0628      	lsls	r0, r5, #24
 80013e6:	d501      	bpl.n	80013ec <_printf_i+0xec>
 80013e8:	681d      	ldr	r5, [r3, #0]
 80013ea:	e002      	b.n	80013f2 <_printf_i+0xf2>
 80013ec:	0669      	lsls	r1, r5, #25
 80013ee:	d5fb      	bpl.n	80013e8 <_printf_i+0xe8>
 80013f0:	881d      	ldrh	r5, [r3, #0]
 80013f2:	4854      	ldr	r0, [pc, #336]	; (8001544 <_printf_i+0x244>)
 80013f4:	2f6f      	cmp	r7, #111	; 0x6f
 80013f6:	bf0c      	ite	eq
 80013f8:	2308      	moveq	r3, #8
 80013fa:	230a      	movne	r3, #10
 80013fc:	2100      	movs	r1, #0
 80013fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001402:	6866      	ldr	r6, [r4, #4]
 8001404:	60a6      	str	r6, [r4, #8]
 8001406:	2e00      	cmp	r6, #0
 8001408:	bfa2      	ittt	ge
 800140a:	6821      	ldrge	r1, [r4, #0]
 800140c:	f021 0104 	bicge.w	r1, r1, #4
 8001410:	6021      	strge	r1, [r4, #0]
 8001412:	b90d      	cbnz	r5, 8001418 <_printf_i+0x118>
 8001414:	2e00      	cmp	r6, #0
 8001416:	d04d      	beq.n	80014b4 <_printf_i+0x1b4>
 8001418:	4616      	mov	r6, r2
 800141a:	fbb5 f1f3 	udiv	r1, r5, r3
 800141e:	fb03 5711 	mls	r7, r3, r1, r5
 8001422:	5dc7      	ldrb	r7, [r0, r7]
 8001424:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001428:	462f      	mov	r7, r5
 800142a:	42bb      	cmp	r3, r7
 800142c:	460d      	mov	r5, r1
 800142e:	d9f4      	bls.n	800141a <_printf_i+0x11a>
 8001430:	2b08      	cmp	r3, #8
 8001432:	d10b      	bne.n	800144c <_printf_i+0x14c>
 8001434:	6823      	ldr	r3, [r4, #0]
 8001436:	07df      	lsls	r7, r3, #31
 8001438:	d508      	bpl.n	800144c <_printf_i+0x14c>
 800143a:	6923      	ldr	r3, [r4, #16]
 800143c:	6861      	ldr	r1, [r4, #4]
 800143e:	4299      	cmp	r1, r3
 8001440:	bfde      	ittt	le
 8001442:	2330      	movle	r3, #48	; 0x30
 8001444:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001448:	f106 36ff 	addle.w	r6, r6, #4294967295
 800144c:	1b92      	subs	r2, r2, r6
 800144e:	6122      	str	r2, [r4, #16]
 8001450:	f8cd a000 	str.w	sl, [sp]
 8001454:	464b      	mov	r3, r9
 8001456:	aa03      	add	r2, sp, #12
 8001458:	4621      	mov	r1, r4
 800145a:	4640      	mov	r0, r8
 800145c:	f7ff fee2 	bl	8001224 <_printf_common>
 8001460:	3001      	adds	r0, #1
 8001462:	d14c      	bne.n	80014fe <_printf_i+0x1fe>
 8001464:	f04f 30ff 	mov.w	r0, #4294967295
 8001468:	b004      	add	sp, #16
 800146a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800146e:	4835      	ldr	r0, [pc, #212]	; (8001544 <_printf_i+0x244>)
 8001470:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001474:	6823      	ldr	r3, [r4, #0]
 8001476:	680e      	ldr	r6, [r1, #0]
 8001478:	061f      	lsls	r7, r3, #24
 800147a:	f856 5b04 	ldr.w	r5, [r6], #4
 800147e:	600e      	str	r6, [r1, #0]
 8001480:	d514      	bpl.n	80014ac <_printf_i+0x1ac>
 8001482:	07d9      	lsls	r1, r3, #31
 8001484:	bf44      	itt	mi
 8001486:	f043 0320 	orrmi.w	r3, r3, #32
 800148a:	6023      	strmi	r3, [r4, #0]
 800148c:	b91d      	cbnz	r5, 8001496 <_printf_i+0x196>
 800148e:	6823      	ldr	r3, [r4, #0]
 8001490:	f023 0320 	bic.w	r3, r3, #32
 8001494:	6023      	str	r3, [r4, #0]
 8001496:	2310      	movs	r3, #16
 8001498:	e7b0      	b.n	80013fc <_printf_i+0xfc>
 800149a:	6823      	ldr	r3, [r4, #0]
 800149c:	f043 0320 	orr.w	r3, r3, #32
 80014a0:	6023      	str	r3, [r4, #0]
 80014a2:	2378      	movs	r3, #120	; 0x78
 80014a4:	4828      	ldr	r0, [pc, #160]	; (8001548 <_printf_i+0x248>)
 80014a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80014aa:	e7e3      	b.n	8001474 <_printf_i+0x174>
 80014ac:	065e      	lsls	r6, r3, #25
 80014ae:	bf48      	it	mi
 80014b0:	b2ad      	uxthmi	r5, r5
 80014b2:	e7e6      	b.n	8001482 <_printf_i+0x182>
 80014b4:	4616      	mov	r6, r2
 80014b6:	e7bb      	b.n	8001430 <_printf_i+0x130>
 80014b8:	680b      	ldr	r3, [r1, #0]
 80014ba:	6826      	ldr	r6, [r4, #0]
 80014bc:	6960      	ldr	r0, [r4, #20]
 80014be:	1d1d      	adds	r5, r3, #4
 80014c0:	600d      	str	r5, [r1, #0]
 80014c2:	0635      	lsls	r5, r6, #24
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	d501      	bpl.n	80014cc <_printf_i+0x1cc>
 80014c8:	6018      	str	r0, [r3, #0]
 80014ca:	e002      	b.n	80014d2 <_printf_i+0x1d2>
 80014cc:	0671      	lsls	r1, r6, #25
 80014ce:	d5fb      	bpl.n	80014c8 <_printf_i+0x1c8>
 80014d0:	8018      	strh	r0, [r3, #0]
 80014d2:	2300      	movs	r3, #0
 80014d4:	6123      	str	r3, [r4, #16]
 80014d6:	4616      	mov	r6, r2
 80014d8:	e7ba      	b.n	8001450 <_printf_i+0x150>
 80014da:	680b      	ldr	r3, [r1, #0]
 80014dc:	1d1a      	adds	r2, r3, #4
 80014de:	600a      	str	r2, [r1, #0]
 80014e0:	681e      	ldr	r6, [r3, #0]
 80014e2:	6862      	ldr	r2, [r4, #4]
 80014e4:	2100      	movs	r1, #0
 80014e6:	4630      	mov	r0, r6
 80014e8:	f7fe fe82 	bl	80001f0 <memchr>
 80014ec:	b108      	cbz	r0, 80014f2 <_printf_i+0x1f2>
 80014ee:	1b80      	subs	r0, r0, r6
 80014f0:	6060      	str	r0, [r4, #4]
 80014f2:	6863      	ldr	r3, [r4, #4]
 80014f4:	6123      	str	r3, [r4, #16]
 80014f6:	2300      	movs	r3, #0
 80014f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80014fc:	e7a8      	b.n	8001450 <_printf_i+0x150>
 80014fe:	6923      	ldr	r3, [r4, #16]
 8001500:	4632      	mov	r2, r6
 8001502:	4649      	mov	r1, r9
 8001504:	4640      	mov	r0, r8
 8001506:	47d0      	blx	sl
 8001508:	3001      	adds	r0, #1
 800150a:	d0ab      	beq.n	8001464 <_printf_i+0x164>
 800150c:	6823      	ldr	r3, [r4, #0]
 800150e:	079b      	lsls	r3, r3, #30
 8001510:	d413      	bmi.n	800153a <_printf_i+0x23a>
 8001512:	68e0      	ldr	r0, [r4, #12]
 8001514:	9b03      	ldr	r3, [sp, #12]
 8001516:	4298      	cmp	r0, r3
 8001518:	bfb8      	it	lt
 800151a:	4618      	movlt	r0, r3
 800151c:	e7a4      	b.n	8001468 <_printf_i+0x168>
 800151e:	2301      	movs	r3, #1
 8001520:	4632      	mov	r2, r6
 8001522:	4649      	mov	r1, r9
 8001524:	4640      	mov	r0, r8
 8001526:	47d0      	blx	sl
 8001528:	3001      	adds	r0, #1
 800152a:	d09b      	beq.n	8001464 <_printf_i+0x164>
 800152c:	3501      	adds	r5, #1
 800152e:	68e3      	ldr	r3, [r4, #12]
 8001530:	9903      	ldr	r1, [sp, #12]
 8001532:	1a5b      	subs	r3, r3, r1
 8001534:	42ab      	cmp	r3, r5
 8001536:	dcf2      	bgt.n	800151e <_printf_i+0x21e>
 8001538:	e7eb      	b.n	8001512 <_printf_i+0x212>
 800153a:	2500      	movs	r5, #0
 800153c:	f104 0619 	add.w	r6, r4, #25
 8001540:	e7f5      	b.n	800152e <_printf_i+0x22e>
 8001542:	bf00      	nop
 8001544:	08001863 	.word	0x08001863
 8001548:	08001874 	.word	0x08001874

0800154c <memcpy>:
 800154c:	440a      	add	r2, r1
 800154e:	4291      	cmp	r1, r2
 8001550:	f100 33ff 	add.w	r3, r0, #4294967295
 8001554:	d100      	bne.n	8001558 <memcpy+0xc>
 8001556:	4770      	bx	lr
 8001558:	b510      	push	{r4, lr}
 800155a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800155e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001562:	4291      	cmp	r1, r2
 8001564:	d1f9      	bne.n	800155a <memcpy+0xe>
 8001566:	bd10      	pop	{r4, pc}

08001568 <memmove>:
 8001568:	4288      	cmp	r0, r1
 800156a:	b510      	push	{r4, lr}
 800156c:	eb01 0402 	add.w	r4, r1, r2
 8001570:	d902      	bls.n	8001578 <memmove+0x10>
 8001572:	4284      	cmp	r4, r0
 8001574:	4623      	mov	r3, r4
 8001576:	d807      	bhi.n	8001588 <memmove+0x20>
 8001578:	1e43      	subs	r3, r0, #1
 800157a:	42a1      	cmp	r1, r4
 800157c:	d008      	beq.n	8001590 <memmove+0x28>
 800157e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001582:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001586:	e7f8      	b.n	800157a <memmove+0x12>
 8001588:	4402      	add	r2, r0
 800158a:	4601      	mov	r1, r0
 800158c:	428a      	cmp	r2, r1
 800158e:	d100      	bne.n	8001592 <memmove+0x2a>
 8001590:	bd10      	pop	{r4, pc}
 8001592:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001596:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800159a:	e7f7      	b.n	800158c <memmove+0x24>

0800159c <_free_r>:
 800159c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800159e:	2900      	cmp	r1, #0
 80015a0:	d048      	beq.n	8001634 <_free_r+0x98>
 80015a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80015a6:	9001      	str	r0, [sp, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f1a1 0404 	sub.w	r4, r1, #4
 80015ae:	bfb8      	it	lt
 80015b0:	18e4      	addlt	r4, r4, r3
 80015b2:	f000 f8d3 	bl	800175c <__malloc_lock>
 80015b6:	4a20      	ldr	r2, [pc, #128]	; (8001638 <_free_r+0x9c>)
 80015b8:	9801      	ldr	r0, [sp, #4]
 80015ba:	6813      	ldr	r3, [r2, #0]
 80015bc:	4615      	mov	r5, r2
 80015be:	b933      	cbnz	r3, 80015ce <_free_r+0x32>
 80015c0:	6063      	str	r3, [r4, #4]
 80015c2:	6014      	str	r4, [r2, #0]
 80015c4:	b003      	add	sp, #12
 80015c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80015ca:	f000 b8cd 	b.w	8001768 <__malloc_unlock>
 80015ce:	42a3      	cmp	r3, r4
 80015d0:	d90b      	bls.n	80015ea <_free_r+0x4e>
 80015d2:	6821      	ldr	r1, [r4, #0]
 80015d4:	1862      	adds	r2, r4, r1
 80015d6:	4293      	cmp	r3, r2
 80015d8:	bf04      	itt	eq
 80015da:	681a      	ldreq	r2, [r3, #0]
 80015dc:	685b      	ldreq	r3, [r3, #4]
 80015de:	6063      	str	r3, [r4, #4]
 80015e0:	bf04      	itt	eq
 80015e2:	1852      	addeq	r2, r2, r1
 80015e4:	6022      	streq	r2, [r4, #0]
 80015e6:	602c      	str	r4, [r5, #0]
 80015e8:	e7ec      	b.n	80015c4 <_free_r+0x28>
 80015ea:	461a      	mov	r2, r3
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	b10b      	cbz	r3, 80015f4 <_free_r+0x58>
 80015f0:	42a3      	cmp	r3, r4
 80015f2:	d9fa      	bls.n	80015ea <_free_r+0x4e>
 80015f4:	6811      	ldr	r1, [r2, #0]
 80015f6:	1855      	adds	r5, r2, r1
 80015f8:	42a5      	cmp	r5, r4
 80015fa:	d10b      	bne.n	8001614 <_free_r+0x78>
 80015fc:	6824      	ldr	r4, [r4, #0]
 80015fe:	4421      	add	r1, r4
 8001600:	1854      	adds	r4, r2, r1
 8001602:	42a3      	cmp	r3, r4
 8001604:	6011      	str	r1, [r2, #0]
 8001606:	d1dd      	bne.n	80015c4 <_free_r+0x28>
 8001608:	681c      	ldr	r4, [r3, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	6053      	str	r3, [r2, #4]
 800160e:	4421      	add	r1, r4
 8001610:	6011      	str	r1, [r2, #0]
 8001612:	e7d7      	b.n	80015c4 <_free_r+0x28>
 8001614:	d902      	bls.n	800161c <_free_r+0x80>
 8001616:	230c      	movs	r3, #12
 8001618:	6003      	str	r3, [r0, #0]
 800161a:	e7d3      	b.n	80015c4 <_free_r+0x28>
 800161c:	6825      	ldr	r5, [r4, #0]
 800161e:	1961      	adds	r1, r4, r5
 8001620:	428b      	cmp	r3, r1
 8001622:	bf04      	itt	eq
 8001624:	6819      	ldreq	r1, [r3, #0]
 8001626:	685b      	ldreq	r3, [r3, #4]
 8001628:	6063      	str	r3, [r4, #4]
 800162a:	bf04      	itt	eq
 800162c:	1949      	addeq	r1, r1, r5
 800162e:	6021      	streq	r1, [r4, #0]
 8001630:	6054      	str	r4, [r2, #4]
 8001632:	e7c7      	b.n	80015c4 <_free_r+0x28>
 8001634:	b003      	add	sp, #12
 8001636:	bd30      	pop	{r4, r5, pc}
 8001638:	2000011c 	.word	0x2000011c

0800163c <_malloc_r>:
 800163c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800163e:	1ccd      	adds	r5, r1, #3
 8001640:	f025 0503 	bic.w	r5, r5, #3
 8001644:	3508      	adds	r5, #8
 8001646:	2d0c      	cmp	r5, #12
 8001648:	bf38      	it	cc
 800164a:	250c      	movcc	r5, #12
 800164c:	2d00      	cmp	r5, #0
 800164e:	4606      	mov	r6, r0
 8001650:	db01      	blt.n	8001656 <_malloc_r+0x1a>
 8001652:	42a9      	cmp	r1, r5
 8001654:	d903      	bls.n	800165e <_malloc_r+0x22>
 8001656:	230c      	movs	r3, #12
 8001658:	6033      	str	r3, [r6, #0]
 800165a:	2000      	movs	r0, #0
 800165c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800165e:	f000 f87d 	bl	800175c <__malloc_lock>
 8001662:	4921      	ldr	r1, [pc, #132]	; (80016e8 <_malloc_r+0xac>)
 8001664:	680a      	ldr	r2, [r1, #0]
 8001666:	4614      	mov	r4, r2
 8001668:	b99c      	cbnz	r4, 8001692 <_malloc_r+0x56>
 800166a:	4f20      	ldr	r7, [pc, #128]	; (80016ec <_malloc_r+0xb0>)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	b923      	cbnz	r3, 800167a <_malloc_r+0x3e>
 8001670:	4621      	mov	r1, r4
 8001672:	4630      	mov	r0, r6
 8001674:	f000 f862 	bl	800173c <_sbrk_r>
 8001678:	6038      	str	r0, [r7, #0]
 800167a:	4629      	mov	r1, r5
 800167c:	4630      	mov	r0, r6
 800167e:	f000 f85d 	bl	800173c <_sbrk_r>
 8001682:	1c43      	adds	r3, r0, #1
 8001684:	d123      	bne.n	80016ce <_malloc_r+0x92>
 8001686:	230c      	movs	r3, #12
 8001688:	6033      	str	r3, [r6, #0]
 800168a:	4630      	mov	r0, r6
 800168c:	f000 f86c 	bl	8001768 <__malloc_unlock>
 8001690:	e7e3      	b.n	800165a <_malloc_r+0x1e>
 8001692:	6823      	ldr	r3, [r4, #0]
 8001694:	1b5b      	subs	r3, r3, r5
 8001696:	d417      	bmi.n	80016c8 <_malloc_r+0x8c>
 8001698:	2b0b      	cmp	r3, #11
 800169a:	d903      	bls.n	80016a4 <_malloc_r+0x68>
 800169c:	6023      	str	r3, [r4, #0]
 800169e:	441c      	add	r4, r3
 80016a0:	6025      	str	r5, [r4, #0]
 80016a2:	e004      	b.n	80016ae <_malloc_r+0x72>
 80016a4:	6863      	ldr	r3, [r4, #4]
 80016a6:	42a2      	cmp	r2, r4
 80016a8:	bf0c      	ite	eq
 80016aa:	600b      	streq	r3, [r1, #0]
 80016ac:	6053      	strne	r3, [r2, #4]
 80016ae:	4630      	mov	r0, r6
 80016b0:	f000 f85a 	bl	8001768 <__malloc_unlock>
 80016b4:	f104 000b 	add.w	r0, r4, #11
 80016b8:	1d23      	adds	r3, r4, #4
 80016ba:	f020 0007 	bic.w	r0, r0, #7
 80016be:	1ac2      	subs	r2, r0, r3
 80016c0:	d0cc      	beq.n	800165c <_malloc_r+0x20>
 80016c2:	1a1b      	subs	r3, r3, r0
 80016c4:	50a3      	str	r3, [r4, r2]
 80016c6:	e7c9      	b.n	800165c <_malloc_r+0x20>
 80016c8:	4622      	mov	r2, r4
 80016ca:	6864      	ldr	r4, [r4, #4]
 80016cc:	e7cc      	b.n	8001668 <_malloc_r+0x2c>
 80016ce:	1cc4      	adds	r4, r0, #3
 80016d0:	f024 0403 	bic.w	r4, r4, #3
 80016d4:	42a0      	cmp	r0, r4
 80016d6:	d0e3      	beq.n	80016a0 <_malloc_r+0x64>
 80016d8:	1a21      	subs	r1, r4, r0
 80016da:	4630      	mov	r0, r6
 80016dc:	f000 f82e 	bl	800173c <_sbrk_r>
 80016e0:	3001      	adds	r0, #1
 80016e2:	d1dd      	bne.n	80016a0 <_malloc_r+0x64>
 80016e4:	e7cf      	b.n	8001686 <_malloc_r+0x4a>
 80016e6:	bf00      	nop
 80016e8:	2000011c 	.word	0x2000011c
 80016ec:	20000120 	.word	0x20000120

080016f0 <_realloc_r>:
 80016f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016f2:	4607      	mov	r7, r0
 80016f4:	4614      	mov	r4, r2
 80016f6:	460e      	mov	r6, r1
 80016f8:	b921      	cbnz	r1, 8001704 <_realloc_r+0x14>
 80016fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80016fe:	4611      	mov	r1, r2
 8001700:	f7ff bf9c 	b.w	800163c <_malloc_r>
 8001704:	b922      	cbnz	r2, 8001710 <_realloc_r+0x20>
 8001706:	f7ff ff49 	bl	800159c <_free_r>
 800170a:	4625      	mov	r5, r4
 800170c:	4628      	mov	r0, r5
 800170e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001710:	f000 f830 	bl	8001774 <_malloc_usable_size_r>
 8001714:	42a0      	cmp	r0, r4
 8001716:	d20f      	bcs.n	8001738 <_realloc_r+0x48>
 8001718:	4621      	mov	r1, r4
 800171a:	4638      	mov	r0, r7
 800171c:	f7ff ff8e 	bl	800163c <_malloc_r>
 8001720:	4605      	mov	r5, r0
 8001722:	2800      	cmp	r0, #0
 8001724:	d0f2      	beq.n	800170c <_realloc_r+0x1c>
 8001726:	4631      	mov	r1, r6
 8001728:	4622      	mov	r2, r4
 800172a:	f7ff ff0f 	bl	800154c <memcpy>
 800172e:	4631      	mov	r1, r6
 8001730:	4638      	mov	r0, r7
 8001732:	f7ff ff33 	bl	800159c <_free_r>
 8001736:	e7e9      	b.n	800170c <_realloc_r+0x1c>
 8001738:	4635      	mov	r5, r6
 800173a:	e7e7      	b.n	800170c <_realloc_r+0x1c>

0800173c <_sbrk_r>:
 800173c:	b538      	push	{r3, r4, r5, lr}
 800173e:	4d06      	ldr	r5, [pc, #24]	; (8001758 <_sbrk_r+0x1c>)
 8001740:	2300      	movs	r3, #0
 8001742:	4604      	mov	r4, r0
 8001744:	4608      	mov	r0, r1
 8001746:	602b      	str	r3, [r5, #0]
 8001748:	f7ff fb50 	bl	8000dec <_sbrk>
 800174c:	1c43      	adds	r3, r0, #1
 800174e:	d102      	bne.n	8001756 <_sbrk_r+0x1a>
 8001750:	682b      	ldr	r3, [r5, #0]
 8001752:	b103      	cbz	r3, 8001756 <_sbrk_r+0x1a>
 8001754:	6023      	str	r3, [r4, #0]
 8001756:	bd38      	pop	{r3, r4, r5, pc}
 8001758:	20000124 	.word	0x20000124

0800175c <__malloc_lock>:
 800175c:	4801      	ldr	r0, [pc, #4]	; (8001764 <__malloc_lock+0x8>)
 800175e:	f000 b811 	b.w	8001784 <__retarget_lock_acquire_recursive>
 8001762:	bf00      	nop
 8001764:	2000012c 	.word	0x2000012c

08001768 <__malloc_unlock>:
 8001768:	4801      	ldr	r0, [pc, #4]	; (8001770 <__malloc_unlock+0x8>)
 800176a:	f000 b80c 	b.w	8001786 <__retarget_lock_release_recursive>
 800176e:	bf00      	nop
 8001770:	2000012c 	.word	0x2000012c

08001774 <_malloc_usable_size_r>:
 8001774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001778:	1f18      	subs	r0, r3, #4
 800177a:	2b00      	cmp	r3, #0
 800177c:	bfbc      	itt	lt
 800177e:	580b      	ldrlt	r3, [r1, r0]
 8001780:	18c0      	addlt	r0, r0, r3
 8001782:	4770      	bx	lr

08001784 <__retarget_lock_acquire_recursive>:
 8001784:	4770      	bx	lr

08001786 <__retarget_lock_release_recursive>:
 8001786:	4770      	bx	lr

08001788 <_init>:
 8001788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800178a:	bf00      	nop
 800178c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800178e:	bc08      	pop	{r3}
 8001790:	469e      	mov	lr, r3
 8001792:	4770      	bx	lr

08001794 <_fini>:
 8001794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001796:	bf00      	nop
 8001798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800179a:	bc08      	pop	{r3}
 800179c:	469e      	mov	lr, r3
 800179e:	4770      	bx	lr
